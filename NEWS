Cdecl NEWS -- history of user-visible changes.

Copyright (C) 2018-2020  Paul J. Lucas, et al.
See the end of the file for license conditions.

Note: over its 30+ year history, cdecl has never had good version numbering.
For changes in a particular version where the version number is unknown, the
version's author is given instead.  For the full (known) list of authors along
with their complete changes, see the AUTHORS file.

-------------------------------------------------------------------------------

* Changes in Cdecl 8.4

** co_await, co_return, co_yield added
These C++20 keywords were added to prevent use as identifiers in C++20 and warn
in older languages.


* Changes in Cdecl 8.3

** "Did you mean ...?" added
If you make a typographical error for either commands or type names, you'll now
receive "did you mean?" suggestions as part of the error message.

** Multiple, comma-separated declarations
Multiple, comma-separated declarations are finally supported.

** C17
The official informal name for ISO/IEC 9899:2018 is now C17 instead of C18.
However, C18 is still accepted as an alias for C17.

** C90
C90 is now accepted as an alias for C89.


* Changes in Cdecl 8.2

** Added `align`
Pseudo-English now allows `align` as a synonym for `aligned`.

** Multiple `set` options
The `set` command can now take multiple options.

** Show abbreviated form
When showing types in pseudo-English, the abbreviated form is used, e.g.:

    cdecl> show
    struct S;                           // instead of: typedef struct S S;

** Type-qualified arrays of unspecified size
C99 type-qualified array function arguments can now have a size omitted, e.g.:

    void f( int a[const] );


* Changes in Cdecl 8.1

** Enum declarations
Enumerations can now be declared in the same abbreviated manner as classes:

    enum E
    enum class E2

** Unified Parallel C support
Added support for Unified Parallel C:

+ Added qualifiers "relaxed", "shared", and "strict".
+ However, for the "shared" qualifier, the optional layout qualifier is parsed
  but otherwise ignored.

Since the Unified Parallel C standard is based on C99, support for Unified
Parallel C is available only when the language is set to C99.

** Restricted references
GNU C++ allows references to be restricted:

    void f( int &__restrict r )
    void g( int &&__restrict rr )

Now, cdecl does too.

** More C++ std types
Added types std::adopt_lock_t, std::align_val_t, std::ambiguous_local_time,
std::atomic_bool, std::atomic_char, std::atomic_char16_t, std::atomic_char32_t,
std::atomic_char8_t, std::atomic_flag, std::atomic_int, std::atomic_int16_t,
std::atomic_int32_t, std::atomic_int64_t, std::atomic_int8_t,
std::atomic_int_fast16_t, std::atomic_int_fast32_t, std::atomic_int_fast64_t,
std::atomic_int_fast8_t, std::atomic_int_least16_t, std::atomic_int_least32_t,
std::atomic_int_least64_t, std::atomic_int_least8_t, std::atomic_intmax_t,
std::atomic_intptr_t, std::atomic_llong, std::atomic_long,
std::atomic_ptrdiff_t, std::atomic_schar, std::atomic_short,
std::atomic_signed_lock_free, std::atomic_size_t, std::atomic_uchar,
std::atomic_uint, std::atomic_uint16_t, std::atomic_uint32_t,
std::atomic_uint64_t, std::atomic_uint8_t, std::atomic_uint_fast16_t,
std::atomic_uint_fast32_t, std::atomic_uint_fast64_t, std::atomic_uint_fast8_t,
std::atomic_uint_least16_t, std::atomic_uint_least32_t,
std::atomic_uint_least64_t, std::atomic_uint_least8_t, std::atomic_uintmax_t,
std::atomic_uintptr_t, std::atomic_ullong, std::atomic_ulong,
std::atomic_unsigned_lock_free, std::atomic_ushort, std::atomic_wchar_t,
std::bad_alloc, std::bad_any_cast, std::bad_array_new_length, std::bad_cast,
std::bad_exception, std::bad_function_call, std::bad_optional_access,
std::bad_type_id, std::bad_variant_access, std::bad_weak_ptr, std::byte,
std::chrono::choose, std::chrono::day, std::chrono::file_clock,
std::chrono::gps_clock, std::chrono::high_resolution_clock,
std::chrono::is_clock, std::chrono::last_spec, std::chrono::leap_second,
std::chrono::local_info, std::chrono::local_t, std::chrono::month,
std::chrono::month_day, std::chrono::month_day_last,
std::chrono::month_weekday, std::chrono::month_weekday_last,
std::chrono::nonexistent_local_time, std::chrono::steady_clock,
std::chrono::sys_info, std::chrono::system_clock, std::chrono::tai_clock,
std::chrono::time_zone, std::chrono::time_zone_link, std::chrono::tzdb,
std::chrono::tzdb_list, std::chrono::utc_clock, std::chrono::weekday,
std::chrono::weekday_indexed, std::chrono::weekday_last, std::chrono::year,
std::chrono::year_month, std::chrono::year_month_day,
std::chrono::year_month_day_last, std::chrono::year_month_weekday,
std::chrono::year_month_weekday_last, std::codecvt_base,
std::condition_variable, std::condition_variable_any, std::ctype_base,
std::cv_status, std::defer_lock_t, std::domain_error, std::error_category,
std::error_code, std::error_condition, std::filebuf,
std::filesystem::copy_options, std::filesystem::directory_entry,
std::filesystem::directory_iterator, std::filesystem::directory_options,
std::filesystem::file_status, std::filesystem::filesystem_error,
std::filesystem::file_type, std::filesystem::path,
std::filesystem::perm_options, std::filesystem::perms,
std::filesystem::recursive_directory_iterator, std::filesystem::space_info,
std::format_error, std::fstream, std::future_errc, std::future_error,
std::future_status, std::ifstream, std::invalid_argument, std::ios,
std::ios_base::failure, std::iostream, std::istream, std::istringstream,
std::length_error, std::locale, std::logic_error, std::messages_base,
std::money_base, std::mutex, std::nonstopstate_t, std::ofstream, std::ostream,
std::ostringstream, std::osyncstream, std::out_of_range, std::overflow_error,
std::range_error, std::recursive_mutex, std::recursive_timed_mutex, std::regex,
std::regex_error, std::runtime_error, std::shared_mutex,
std::shared_timed_mutex, std::stop_source, std::stop_token, std::streambuf,
std::stringbuf, std::stringstream, std::string_view, std::syncbuf,
std::system_error, std::time_base, std::timed_mutex.  std::try_to_lock_t,
std::u16string_view, std::u32string_view, std::u8string_view,
std::underflow_error, std::wfilebuf, std::wfstream, std::wifstream, std::wios,
std::wiostream, std::wistream, std::wistringstream, std::wofstream,
std::wostream, std::wostringstream, std::wosyncstream, std::wregex,
std::wstreambuf, std::wstringbuf, std::wstringstream, std::wstring_view, and
std::wsyncbuf.

** Fixed class declarations
Declaring a class as either:

    class C1
    class C2;

now works.


* Changes in Cdecl 8.0

** C2X support
Added support for C2X:

+ Added type char8_t.
+ Added [[...]] syntax for attributes.
+ Added [[deprecated]], [[maybe_unused]], and [[nodiscard]] attributes.
+ Removed support for typeless function arguments in K&R C.

** More C++20 support
Added support for "constinit" and "export" in C++20.

** Embedded C support
Added support for Embedded C:

+ Added types "_Accum" and "_Fract" (and "accum" and "fract").
+ Added modifier "_Sat" (and "sat" and "saturated").
+ Added the typedefs int_hk_t, int_hr_t, int_k_t, int_lk_t, int_lr_t, int_r_t,
  uint_uhk_t, uint_uhr_t, uint_uk_t, uint_ulk_t, uint_ulr_t, and uint_ur_t.

Since the Embedded C standard is based on C99, support for Embedded C is
available only when the language is set to C99.

** Forbidding attribute syntax
The [[xxx]] attribute syntax is now forbidden until either C2X or C++11.

** class, struct, & union optional ';'
Semicolons are now optional after "class", "struct", or "union" declarations.

** class, struct, & union define themselves
Before now:

    class C { typedef int Int; }

would define only C::Int as a type.  Now, the enclosing class, struct, or union
is also defined as a type.  Hence, the above is now equivalent to:

    define C as class C
    define C::Int as int

This also means that either:

    class C { }
    class C

is eqivalent to:

    define C as class C

** class, struct, & union commands
"class", "struct", and "union" are now commands (just like namespace).

** Per-scope types; fixed English scope name order
Each scope of a scoped name (sname) now has its own type.  Additionally, the
English printed order is now (correctly) inner-to-outermost.  For example:

    c++decl> namespace N { class C { typedef int I; }; }
    c++decl> explain N::C::I x
    declare x as I of class C of namespace N

** Floating-point extensions for C types
Added types _Decimal32_t, _Decimal64_t, _Decimal64x, _Decimal128x, _Float32,
_Float32x, _Float64, _Float128, _Float128x, femode_t, and long_double_t.

** Aligned to
Now allowing "to" in addition to "as" for "... aligned [as|to] ...".

** Show as
Now allowing an optional "as" in "show ... [as] typedef".

** asm
Added "asm" keyword to prevent declarations from using it.


* Changes in Cdecl 7.4.1

** Allowing signed main()
The legal "signed main()" signature is now accepted.

** Ignoring east-const in English
East const is now ignored when explaining gibberish.

** Disallowing reference to reference
References to references are now errors.


* Changes in Cdecl 7.4

** Bison debugging change
Changed --enable--yydebug configure option to --enable-bison-debug,
--yydebug/-y cdecl options to --bison-debug/-B, and yydebug to bison-debug set
option.

** Added Flex debugging
Added --enable-flex-debug configure option, --flex-debug/-F cdecl options, and
flex-debug set option.

** Fixed set options
Finally fixed parsing of set options.


* Changes in Cdecl 7.3

** Checking main()'s signature
The signature of main() is now checked.

** More C standard types
Added the standard C types atomic_flag, double_t, fenv_t, fexcept_t, float_t,
jmp_buf, memory_order, va_list, wctrans_t, and wctype_t.

** Fixed explaining pointer-to-array function arguments
Explaining a declaration like:

    cdecl> explain void f(double (*a)[5])

crashed; fixed.


* Changes in Cdecl 7.2

** new & delete operator overloading
Added support for composing and deciphering C++ overloaded new, new[], delete,
and delete[] operators.

** extern & static functions
Extern or static functions can not be const.

** English scoped types
Given:

    struct S { typedef int Int; }
    explain S::Int x

the explanation is:

    declare x as Int of structure S

but English types ("T of ...") weren't legal in cdecl's grammar.  They are now.

** More C++ std types
Added types std::align_val_t, std::destroying_delete_t, and std::nothrow_t.

** throw() put back
"throw" is still a keyword so it was put back in C++20.

** Fixed user-defined literal argument
Explicitly specifying "int" is now accepted.


* Changes in Cdecl 7.1

** Added more GNU extensions
Added GNU C's __complex, __complex__, __const, __inline, __restrict, __signed,
__signed__, __volatile, and __volatile__.

* _Bool in C
In C, _Bool is now emitted rather than bool.

* register removed
register is now removed (but still reserved) in C++17 and later.


* Changes in Cdecl 7.0

** East const
New -E/--east-const command-line and east-const set options to use "east const"
in gibberish:

    cdecl> declare x as const int
    int const x;

** Correct scope names for nested types
Previously, scope names for nested types were always printed as "of scope"; now
they print the type of scope ("class", "struct", "union", or "namespace"):

    c++decl> struct S { typedef int Int; };
    c++decl> explain S::Int x
    declare x as Int of structure S

** Declare const/volatile user-defined conversion operators
Can now declare const/volatile user-defined conversion operators.

** no_unique_address
Added support for the [[no_unique_address]] attribute in C++20.

** Typename
Now allowing "typename" in declarations (even though it's not needed):

    struct S { typedef int I; };
    explain typename S::I x
    typedef typename S::I T

** throw() deprecated/removed
throw() has been deprecated starting with C++11 and removed in C++20.

** Fixed unknown type in typedef
Fixed a crash caused by a case like:

    define S as struct S
    explain S::T x


* Changes in Cdecl 6.11

** Added __inline__, __restrict__, and __thread
Added GNU C's __inline__, __restrict__, and __thread.

** Added GNU C types
The GNU C types _Decimal32, _Decimal64, _Decimal128, _Float128, __float128,
_Float16, __fp16, __ibm128, _Float64x, __float80, and __int128 were added to
the set of predefined types.

** Added WIN32 types
All of the Windows types, e.g., DWORD, HANDLE, INT, etc., given here
<https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types>
were added to the set of predefined types.

** Fixed retypedef
Fixed a crash caused by a case like:

    typedef int I
    typedef I J
    typedef I J


* Changes in Cdecl 6.10

** Added __auto_type
Added GNU C's __auto_type.

** Fixed "long long" C version
The "long long" type was incorrectly allowed in C89; it wasn't added until C99.

** Added pthread.h, threads.h, and C++ thread types
The types pthread_t, pthread_barrier_t, pthread_barrierattr_t, pthread_cond_t,
pthread_condattr_t, pthread_mutex_t, pthread_mutexattr_t, pthread_once_t,
pthread_rwlock_t, pthread_rwlockattr_t, and pthread_spinlock_t from <pthread.h>
(POSIX); the types thrd_t, cnd_t, mtx_t, once_flag, thrd_start_t, tss_dtor_t,
and tss_t from <thread.h> (C11); and std::thread (C++11) and std::jthread
(C++20) from <thread> were added to the set of predefined types.


* Changes in Cdecl 6.9

** Cast accepts "as" and "to"
The "cast" command now accepts "as" and "to" in addition to "into".

** Autocomplete of explain-by-default
Autocomplete was missing explain-by-default; fixed.


* Changes in Cdecl 6.8.2

** Explain-by-default for const and static
When in explain-by-default mode, a special case has to be made for const and
static since explain is implied only when NOT followed by "cast":

    const int *p                        // Implies explain.
    const cast p into pointer to int    // Does NOT imply explain.


* Changes in Cdecl 6.8.1

** Reset lexer start-state
In 6.8, start states were added to the lexer.  Resetting the lexer now includes
also resetting the start state.


* Changes in Cdecl 6.8

** Added set lang=<lang>
Since the set explicit-int option was added (an option that takes a value), a
set lang=<lang> option was added.


* Changes in Cdecl 6.7

** Explicit int in English
Previously when explaining integer declarations, "int" was implicit:

    cdecl> explain unsigned x
    declare x as unsigned

Now "int" is explicit:

    cdecl> explain unsigned x
    declare x as unsigned int

** Added explicit-int option
Both a command-line --explicit-int/-I and explicit-int set option have been
added that set which integer types have "int" explicitly included in
declarations.


* Changes in Cdecl 6.6.2

** Added atomic_char8_t
Added atomic_char8_t typedef for C++20.

** Fixed flex & bison dependency
Now insists on flex & bison only when lexer.c & parser.c don't exist (i.e.,
when building from a git clone that doesn't include those files rather than an
official release that does).

** Explicit structure definition error
Structure declarations (that were never supported) now produce a specific error
message:

    cdecl> explain struct S { int x; };
                            ^
    18: error: structure definitions are not supported

** Fixed libreadline/libcurses dependency
Moved check for libcurses before libreadline since some implementations of the
latter depend on the former (e.g., Solaris 11).

** More gcc warnings
Enabled more gcc warnings and fixed them.

** thread-local
Added this (with a '-') as an English synonym for thread_local (with an '_').


* Changes in Cdecl 6.6.1

** Fixed upgrade install
When installing an upgrade, no longer fails when a c++decl symbolic link
already exists.


* Changes in Cdecl 6.6

** Defaulted & deleted support
Defaulted & deleted special member functions are now supported.

** Explain-by-default option
Both a command-line --explain/-e and explain-by-default set option have been
added that assume a command that doesn't start with any command means "explain."

** Set option abbreviations
Unambiguous set option name abbreviations may now be used.

** Virtual constexpr
Virtual constexpr declarations are now only correctly allowed in C++20.


* Changes in Cdecl 6.5.1

** Complete storage-class-like constructors
Previously, only "explicit" was supported for constructors.  Now all of
constexpr, explicit, friend, inline, and noexcept (or throw()) are supported.


* Changes in Cdecl 6.5

** Much better alternative tokens support
Alternative tokens (and, and_eq, etc.) are now parsed correctly in all cases.
Additionally, alternative tokens can be emitted via the new set alt-tokens
option.

** Changed -q to -p
The --quiet and -q options (that were in the original cdecl) were changed to
--no-prompt and -p so they're more explicit about what they do.

** Trigraphs warning
If the trigraphs option is set and the language is C++17 or later, a warning
will be printed (since trigraphs were removed from C++17).

** Set command output changed
The "set" command now only prints the current options.  Its help has beed added
to the "help" command.

** Better K&R C prototypes error
The error message given when attempting to use function prototypes in K&R C has
been improved.


* Changes in Cdecl 6.4.2

** Fixed 32-bit CPU support
Now (again) supports running on 32-bit platforms.

** More help
The --help option now prints long options and project URLs.


* Changes in Cdecl 6.4.1

** Fixed use of GNU Readline
Several things relating to the use of GNU Readline were fixed.


* Changes in Cdecl 6.4

** Added support for user-defined conversion operators
Now supports C++ user-defined conversion operators.

    cdecl> explain operator int const*() const
    declare constant user-defined conversion operator returning pointer to constant int

** Added support for alignment specifiers
Now supports C11 _Alignas and C++11 alignas specifiers.

    cdecl> explain _Alignas(64) int x
    declare x as int aligned as 16 bytes

** Added more predefined typedefs
More predefined typedefs were added: fd_set, nfds_t, and sigset_t.


* Changes in Cdecl 6.3.2

** Added missing "virtual" for destructor
Added "virtual" that was missing from the help and man page for destructor.


* Changes in Cdecl 6.3.1

** Added support for noexcept constructors
Constructors can now be noexcept.

** Added support for noexcept and virtual destructors
Destructors can now be noexcept and/or virtual.


* Changes in Cdecl 6.3

** Added support for constructors & destructors
Now supports C++ constructors & destructors.

** Split up help command output
The output of the "help" command has been split into "command" and "english"
because the output has gotten too big for an 80x24 screen.


* Changes in Cdecl 6.2

** Added C++11 user-defined literal support
Added support for user-defined literals.  For example:

    cdecl> explain int operator"" _a(unsigned long long x)
    declare _a as user-defined literal (x as unsigned long long) returning int

** More commands as first argument
More commands (define, namespace, set, static, typedef, and using) are now
recognized as such when they are the first argument.

** Added support for char8_t
Now supports C++20's char8_t.

** Added support for more standard types
Added typedef declarations for div_t, imaxdiv_t, ldiv_t, lldiv_t, sig_atomic_t,
streambuf, streamoff, streamsize, and wstreambuf.


* Changes in Cdecl 6.1

** Final or override now implies virtual
Either final or override in a function's signature now implies it's virtual:

    cdecl> explain void f() override
    declare f as overridden virtual member function returning void


* Changes in Cdecl 6.0.2

** Added strndup()
Added Gnulib's strndup() for systems that don't have it.

** Fixed cast warning
Fixed "cast to pointer from integer of different size" on some compilers.


* Changes in Cdecl 6.0.1

** Fixed undefined uint64_t
Fixed a compile-time error on some platforms.


* Changes in Cdecl 6.0

** Added C++ scoped name support
Added support for scoped names in C++.  For example:

    cdecl> explain int S::x
    declare x of scope S as int
    cdecl> define S::T as struct T; explain S::T x
    declare x as T of scope S

** Added partial namespace support
Specifically, you can now perform typedef and using declarations within
namespaces or inline namespaces:

    c++decl> namespace S { inline namespace T { typedef int Int; } }
    c++decl> show user typedef
    namespace S::T { typedef int Int; }


* Changes in Cdecl 5.2

** Added digraph and trigraph support
Added support for digraphs and trigraphs.


* Changes in Cdecl 5.1

** Added C++20 support
Specifically, consteval functions, operator<=>(), and predefined typedefs were
added: partial_ordering, strong_equality, strong_ordering, weak_equality, and
weak_ordering.

** Added C17 support
Since C17 is only a bugfix version, "C17" is merely recognized as a valid
version of C.


* Changes in Cdecl 5.0

** Added all C/C++ keywords
All C/C++ keywords have been added to the lexer/parser to prevent declaring
variables or functions having names that are keywords.  For example:

    declare break as int

is now correctly reported as an error.

Additionally, names that are keywords is later versions of C/C++, while legal,
now issue warnings, e.g.:

    cdecl> declare class as int
                   ^
    18: warning: "class" is a keyword in C++98
    int class;

** Operator overloading
Added support for composing and deciphering C++ overloaded operators:

    c++decl> explain bool operator()() const override
    declare () as overridden virtual constant member operator returning bool

** Fixed const/volatile reference
Declarations of the form:

    declare r as const reference to int
    declare r as volatile reference to int

are now correctly reported as an error.

** Added member/non-member to functions
You can now explcitly specify either "member" or "non-member" in declarations:

    declare f as const member function

Additionally, cdecl will include "member" in function explanations when it can
infer a function is a member function:

    cdecl> explain void f() const
    declare f as constant member function returning void

** Fixed friend const/volatile/override/final/virtual/reference functions
Declarations of the form:

    declare f as friend const function returning bool

are now correctly reported as an error.


* Changes in Cdecl 4.8.1

** Fixed ^ position
An error in a second (or subsequent) command after a ';', e.g.:

    typedef int Int; show foo

now correctly positions the ^.


* Changes in Cdecl 4.8

** Show command improvement
The show command can now show the definition of a type in English (same as
before, but now the default) or in gibberish as a typedef (new, optional).

Note also that the trailing "types" keyword has been removed from the command:
it wasn't needed.


* Changes in Cdecl 4.7

** Added more predefined types
More predefined typedefs were added: blkcnt_t, blksize_t, clockid_t, clock_t,
dev_t, errno_t, FILE, fpos_t, gid_t, in_addr_t, ino_t, in_port_t, mbstate_t,
mode_t, nlink_t, off_t, pid_t, rlim_t, rsize_t, sa_family_t, socklen_t,
suseconds_t, time_t, uid_t, useconds_t, and wint_t.


* Changes in Cdecl 4.6.1

** Fixed explaining of unnamed array function arguments
Explaining unnamed array function arguments like:

    void f(char[])

now works.


* Changes in Cdecl 4.6

** Explain using declarations
Added support for explaining C++11's "using" declarations.


* Changes in Cdecl 4.5

** Using declarations
Added support for C++11's "using" declarations as a synonym for typedef.


* Changes in Cdecl 4.4.3

** Minor fix to red-black tree code
Now initializing node->parent to NIL.


* Changes in Cdecl 4.4.2

** Fixed declare of function with an invalid argument
A declaration like:

    declare f as function (x as unknown_type)

now correctly reports the unknown type.


* Changes in Cdecl 4.4.1

** Fixed typedef of pointer-to-function
A typedef like:

    typedef void (*f)(int)

now works correctly.

** Added CONFIGURATION FILE section
The cdecl(1) man page now contains a CONFIGURATION FILE section.


* Changes in Cdecl 4.4

** Added C++ attribute specifier support
The C++ attrribute specifiers carries_dependency, deprecated, noreturn,
maybe_unused, and nodiscard are now supported.


* Changes in Cdecl 4.3

** Added C99 _Imaginary number support
C99 _Imaginary number declarations are now supported.

** External
The keyword "external" is now a synonym for "extern".

** More English for explain
More English synonyms are used in explanations, e.g.:

    declare x as automatic
    declare x as constant int
    declare x as enumeration E
    declare x as structure S


* Changes in Cdecl 4.2

** Added noexcept and throw() support
Function declarations may now include exception specifications.

** Fixed handling of leading whitespace in command-line argument
The unusual case of:

    cdecl ' declare x as int'

i.e., a quoted argument having leading whitespace, is now handled correctly.


* Changes in Cdecl 4.1

** New C11 standard atomic types
The following C11 atomic types are now supported via the new typedef command:
atomic_bool, atomic_char, atomic_schar, atomic_char16_t, atomic_char32_t,
atomic_wchar_t, atomic_short, atomic_int, atomic_long, atomic_llong,
atomic_uchar, atomic_ushort, atomic_uint, atomic_ulong, atomic_ullong,
atomic_ptrdiff_t, atomic_size_t, atomic_intmax_t, atomic_intptr_t,
atomic_uintptr_t, atomic_uintmax_t, atomic_int_fast8_t, atomic_int_fast16_t,
atomic_int_fast32_t, atomic_int_fast64_t, atomic_uint_fast8_t,
atomic_uint_fast16_t, atomic_uint_fast32_t, atomic_uint_fast64_t,
atomic_int_least8_t, atomic_int_least16_t, atomic_int_least32_t,
atomic_int_least64_t, atomic_uint_least8_t, atomic_uint_least16_t,
atomic_uint_least32_t, and atomic_uint_least64_t.

** Fixed typedef and define commands with storage classes
Typedef and define now prohibit storage classes, e.g.:

    typedef static int sint;

is now correctly reported as an error.


* Changes in Cdecl 4.0

** Added C++17 support
Specifically, inline variable declarations are now supported.

** New typedef and define commands
New typedef gibberish and define english commands have been added to allow new
types to be defined that can then be used in subsequent declarations and
explanations.

** New C99 standard types
The following C99 types are now supported via the new typedef command:
int8_t, int16_t, int32_t, int64_t, int_fast8_t, int_fast16_t, int_fast32_t,
int_fast64_t, int_least16_t, int_least32_t, int_least64_t, int_least8_t,
intmax_t, intptr_t, ptrdiff_t, uint8_t, uint16_t, uint32_t, uint64_t,
uint_fast8_t, uint_fast16_t, uint_fast32_t, uint_fast64_t, uint_least8_t,
uint_least16_t, uint_least32_t, uint_least64_t, uintmax_t, and uintptr_t.

** New --no-typedefs/-t command-line options
Either of these options suppresses the definition of the standard C99 types.

** Reads configuration file
Upon start-up and if it exists, reads ~/.cdeclrc (by default) for user-defined
typedef or define commands.

** New --config/-c command-line options
These options specify an alternate configuration file to read upon start-up.
As a result, the -c option in earlier versions of cdecl used to specify when to
colorize output has been renamed to -k.

** New --no-config/-C command-line options
These options suppress the reading of a configuration file, even one explicitly
specified via --config/-c.

** New show command
A new show command has been added to show the definition of either predefined
or user-defined types.

** Register warning
The use of "register" now triggers a warning in C++11 and later.


* Changes in Cdecl 3.6

** First word of first argument
The first word of the first non-option command-line argument is now also
checked to see if it's a command thus allowing fully quoted strings:

    $ cdecl 'explain int *const p'


* Changes in Cdecl 3.5

** Added ssize_t
Similar to size_t, support for ssize_t has been added.


* Changes in Cdecl 3.4.1

** Fixed new-style casts C++ version
New-style casts are now permitted as far back as C++98.


* Changes in Cdecl 3.4

** Static & type-qualified arrays
Added support for C99 static and type-qualified array function arguments, e.g.:

    void f( int a[static const 10] );

** Variable length arrays
Added support for C99 variable length array function arguments, e.g.:

    void f( int a[*] );
    void g( int a[const *] );

** Help command-line argument
Now prints the help message and exits if the first command-line argument is
"help".

** Fixed reference to array
The generated gibberish for "reference to array" has been fixed.


* Changes in Cdecl 3.3

** Help command-line option
Added the command-line options of -h or --help that prints the usage message.

** Fixed const pointers to members
Explaining const/volatile pointers to members now works.


* Changes in Cdecl 3.2

** C++ new-style casts
Added support for C++ new-style casts.

** Language-sensitive autocompletion
Autocompletion is now language-sensitive in that it will not offer completions
that are not valid in the current language.

** Context-sensitive autocompletion
Autocompletion is now slightly more context-sensitive in that it will offer
only command keywords for the first word in the input.

** Fixed command-line error printing
Command-line input is now printed when there's an error.


* Changes in Cdecl 3.1.5

** Fixed color prompt caret position
The position of the caret in error messages when using color prompts has been
fixed.


* Changes in Cdecl 3.1.4

** Fixed cv-qualifier in help
The <cv-qualifier> in the help text was missing '>'.


* Changes in Cdecl 3.1.3

** Fixed synonyms in explain
Explanations no longer wrongly allow English synonyms.


* Changes in Cdecl 3.1.2

** Fixed declarations with storage-class
Declarations like:

    declare x as static pointer to function returning int
    declare x as type pointer to function returning int

are fixed.


* Changes in Cdecl 3.1.1

** Parallel builds
Parallel builds are fixed.

** Manual page caveats
Added additional caveats: qualified C++ data members or member functions are
not supported.


* Changes in Cdecl 3.1

** Ref-qualifiers
Now supports C++11 function ref-qualifiers.

** Installs c++decl
A "make install" will now also create c++decl as a symbolic link to cdecl.


* Changes in Cdecl 3.0.1

** Renamed --disable-debug to --disable-cdecl-debug
Renamed this configure option to avoid clash with conventional --disable-debug
option.


* Changes in Cdecl 3.0

** GNU Autotools
The GNU Autotools suite is now used to build.

** GNU-style test suite and many more tests
There are now over 500 unit tests that can be run via "make check".

** More semantic checks
Many more semantic checks have been added to disallow invalid declarations.

** Long command-line options
Long (GNU-style) command-line options, e.g., --language, are now accepted.

** Multi-line input
Long commands can now be given across multiple lines by escaping the newlines
with a backslash.

** More C and C++ versions
Now distinguishes among K&R C, C89, C95, C99, C11, C++98, C++03, C++11, and
C++14.

** More types
Now supports _Atomic, bool, char16_t, char32_t, complex, noreturn, restrict,
thread_local, and wchar_t.

** Inline functions
Added inline function support.

** Function arguments
Added register and variadic function argument support (independently).

** Typedef declarations
Added typedef declarations (independently).

** C++ member functions
Added final, friend, const, override, volatile, virtual, and pure virtual C++
member function declaration support.

** C++11 features
Added C++11 auto, constexpr, enum class, mutable, rvalue references, and the
function trailing return-type syntax.

** Optional returning
In pseudo-English for functions, the "returning" clause is now optional and
equivalent to returning void.

** Number bases
Binary, octal, and hexadecimal numbers can now be used for array sizes.

** Better warning an error messages
Warning and error messages are now better, complete with location information
and color.

** Comments
C /*...*/ and C++ // comments are now ignored.

** No cdecl reserved words in C declarations
Reserved words that are part of cdecl's pseudo-English are no longer considered
such when explaining C or C++ declarations.

* Revamped manual page.
The cdecl(1) manual page has been revamped.


* Changes in Cdecl 2.5-blocks

** Blocks syntax
Added support for Apple's "blocks" syntax per N1370 "Apple’s Extensions to C"
<http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1370.pdf>.


* Changes in Cdecl 2.5

** GNU readline
Now using GNU readline (when available) for command-line editing.

** Prompt/Noprompt commands
New "prompt" and "noprompt" commands are available.


* Changes by Tony Hansen

** Improved grammar
More parts can be missing during explanations.

** Variadic arguments
Functions can now accept a variadic argument.


* Changes by Alexander Dupuy

** Additional K&R C checks
Now warns about use of signed or void in K&R C.

** Better C++ reference support
Better semantic checking on C++ references is now done.

** Const/volatile
Const and volatile function pointers are now supported.


* Changes by Merlyn LeRoy

** Extern, register, and static
Added extern, register, and static support.

** Alternate invocation
Cdecl can now be invoked as cast, declare, or explain from the command-line.


* Changes in Cdecl 2.0

** C++
C++ declarations are now supported.

** Create program at runtime
The "Create program" feature is now selectable at runtime.

** File input
Cdecl can now parse input from files in addition to standard input.

** Initial help message
When starting, cdecl now prints a help message.

** Prompt
Now displays a prompt when either standard input is connected to a TTY or when
in interactive mode.

** More command-line options
Cdecl now has the additional command-line options of -a, -r, -p, -c, -d, -D,
-V, -i, and -+.

** Set options
A new "set options" command is available.

** Exit/Quit command
New "exit" and "quit" commands are available.

** Synonyms
Now supports synonyms for some pseudo-English words.


* Changes by David Wolverton

** Typedef declarations
Added typedef declarations.

** Noalias removal
Support for noalias has been removed.


* Changes by <unknown author>

** Hints
For some errors, a hint about a possible fix is now printed.

** Function arguments
Now accepts function arguments.

** Explain casts
Added ability to explain casts.

** Create program
Added #ifdef to emit either a semicolon (for variables) or braces (for
functions) afterwards.


* Changes in Cdecl 1.0

** Initial version

-------------------------------------------------------------------------------
The file is part of Cdecl.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
