.\"
.\"     cdecl -- C gibberish translator
.\"     cdecl.1: manual page
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.if !'\\$1'0' .sp
..
.\" ---------------------------------------------------------------------------
.TH \f3cdecl\fP 1 "March 27, 2017" "PJL TOOLS"
.SH NAME
cdecl, c++decl \- compose and decipher C & C++ declarations and casts
.SH SYNOPSIS
.B cdecl
.BI [ options ]
.BI [ file " " ... ]
.br
.B c++decl
.BI [ options ]
.BI [ file " " ... ]
.br
.B cast
.BI [ options ]
.I english
.br
.B declare
.BI [ options ]
.I english
.br
.B explain
.BI [ options ]
.I gibberish
.SH DESCRIPTION
\f2``I'm still uncertain about the language declaration syntax,
where in declarations,
syntax is used that mimics the use of the variables being declared.
It is one of the things that draws strong criticism,
but it has a certain logic to it.''\fP
.PD 0
.IP
\(em Dennis M. Ritchie

.P
.PD
.I ``I consider the C declarator syntax an experiment that failed.''
.PD 0
.IP
\(em Bjarne Stroustrup
.PD
.PP
.B cdecl
is a program for composing and deciphering C (or C++)
type declarations
or casts,
aka ``gibberish.''
It can be used interactively on a terminal
or accept input from either the command line or standard input.
.SH INVOCATION
.SS Executable Name
.B cdecl
may be invoked
under a number of different names
(by either renaming the executable
or creating either a symbolic or hard link to it).
If it is invoked as:
.TP 9
.B cdecl
Runs with C11 as the default language.
.TP
.B c++decl
Runs with C++11 as the default language.
.TP
.BR cast " | " declare
Interprets the rest of the command-line
(if given)
as English,
performs the conversion to gibberish,
and exits.
.TP
.B explain
Interprets the rest of the command-line
(if given)
as gibberish,
performs the conversion to English,
and exits.
.P
For example
(where \f(CW$\fP is the shell prompt):
.cS
$ declare p as pointer to const pointer to const int
const int *const *p;
.cE
When using
.BR explain ,
care must be taken either to escape or quote shell metacharacters:
.cS
$ explain 'int *const (*p)[4]'
declare p as pointer to array 4 of const pointer to int
.cE 0
.SS First Argument
.B cdecl
will also behave as above
if the first non-option argument on the command-line
is one of
.BR cast ,
.BR declare ,
or
.BR explain .
.SS Standard Input
If no file names are given,
or a file name of ``\f(CW-\fP'' is encountered,
standard input will be read
until end-of-file is encountered
or either the
.B exit
or
.B quit
command is given.
.PP
You can use
.B cdecl
as you create a C (or C++) program with an editor like
.BR vi (1).
You simply type in the pseudo-English version of the declaration and apply
.I cdecl
as a filter to the line.
(In
.BR vi (1),
type
.cS
!!cdecl<cr>
.cE 0
.SS Interactive Input
If standard input is coming from a terminal
(or either the
.B \-\-interactive
or
.B \-i
option is specified),
a prompt of either
\f(CWcdecl>\fP
or
\f(CWc++decl>\fP
will be written to the terminal before each line of input.
The prompt can be turned off by either the
.B \-\-quiet
or
.B \-q
option,
or the
.B set noprompt
command.
.PP
.B cdecl
uses the GNU
.BR readline (3)
library
to provide keyword completion,
command-line history,
and
editing.
.SS File Input
.B cdecl
reads the named files for statements in the language described below.
A transformation is made from that language to C (C++) or pseudo-English.
The results of this transformation are written on standard output.
.SH OPTIONS
An option argument
.I n
means
.I "unsigned integer"
and
.I s
means
.IR string .
If
.I n
starts with
.BR 0 ,
then it is interpreted as octal;
if
.I n
starts with either
.B 0x
or
.BR 0X ,
then
.I n
is interpreted as hexedecimal.
.TP 8
.BR \-\-c89 " | " \-8
Shorthand for either
.B \-\-language=c89
or
.BR \-xc89 .
.TP
.BR \-\-c99 " | " \-9
Shorthand for either
.B \-\-language=c99
or
.BR \-xc99 .
.TP
.BR \-\-c++ " | " \-c
Shorthand for either
.B \-\-language=c++
or
.BR \-xc++ .
.TP
.BR \-\-debug " | " \-d
Turns on debugging output (if compiled in).
The additional JSON-like output is of an abstract syntax tree
as it is being constructed
from user input
while the parser is reducing grammar productions.
(This is a debugging aid for developers of
.B cdecl
itself.)
.TP
.BR \-\-file \f1=\fPf "\f1 | \fP" "" \-f " f"
Reads commands from file
.IR f .
.TP
.BR \-\-interactive " | " \-i
Forces interactive mode,
that is
turns on prompting
and
enables line-editing and history.
(This is the default when connected to a terminal.)
.TP
.BR \-\-knr " | " \-k
Shorthand for either
.B \-\-language=knr
or
.BR \-xknr .
.TP
.BR \-\-lang \f1=\fPs "\f1 | \fP" "" \-x " s"
Specifies which dialect of what language
.I s
(which is case-insensitive)
to use.
The choices for
.I s
are:
.RS
.TP 7
.B KNR
Use the pre-ANSI Kernighan & Ritchie dialect of the C language
as given in the first edition of
.IR "The C Programming Language" .
.TP
.B C89
Use the C89 (ANSI C) dialect of the C language.
Adds support for
\f(CWconst\fP,
\f(CWenum\fP,
\f(CWsigned\fP,
\f(CWvoid\fP,
and
\f(CWvolatile\fP.
.TP
.B C99
Use the C99 dialect of the C language.
Adds support for
\f(CW_Bool\fP (and \f(CWbool\fP),
\f(CW_Complex\fP (and \f(CWcomplex\fP),
\f(CWrestrict\fP,
and
\f(CWwchar_t\fP.
.TP
.B C11
Use the C11 dialect of the C language.
Adds support for
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
and
\f(CW_Thread_local\fP
and (\f(CWthread_local\fP).
.TP
.B C++03
Use the C++03 dialect of the C++ language.
Adds support for
\f(CWclass\fP,
references,
and pointers to class members.
.TP
.B C++11
Use the C++11 dialect of the C++ language.
Adds support for
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
and
\f(CWthread_local\fP.
.RE
.IP ""
The default is
.B C11
(for
.BR cdecl )
and
.B C++11
(for
.BR c++decl ).
.TP
.BR \-\-no-semicolon " | " \-s
Suppresses printing of a trailing semicolon for C & C++ declarations.
.TP
.BR \-\-output \f1=\fPf "\f1 | \fP" "" \-o " f"
Sends all non-error output to file
.IR f .
.TP
.BR \-\-quiet " | " \-q
Be quiet by suppressing the prompt in interactive mode.
.TP
.BR \-\-version " | " \-v
Prints the version number to standard error
and exits.
.TP
.BR \-\-yydebug " | " \-y
Turns on
.BR bison (1)
debugging output (if compiled in).
The additional output is of grammar productions
as they are being reduced by the parser.
(This is a debugging aid for developers of
.B cdecl
itself.)
.SH COMMANDS
.B cdecl
has the following commands:
.RS 4
.TP 4
.BI cast " name" " into" " english"
Composes a C (or C++) cast from English.
.TP
.BI declare " name" " as" " english"
Composes a C (or C++) declaration from English.
.TP
.BI explain " declaration"
Deciphers a C (or C++) declaration into English.
.TP
.BR "explain (" \f2cast\fP ")" [ \f2name\fP ]
Deciphers a C (or C++) cast into English.
.TP
.BR set " [" \f2option\fP "]"
Sets a particular option, if given;
if not,
prints the current value of all options.
.TP
.BR help " | " ?
Prints a grammar summary.
.TP
.BR exit " | " quit
Quits
.BR cdecl .
.RE
.P
Each command is terminated by either a semicolon or newline.
.SH SYNONYMS
Some synonyms are permitted during a declaration:
.sp
.nf
    character   is a synonym for   char
     constant   is a synonym for   const
  enumeration   is a synonym for   enum
         func   is a synonym for   function
      integer   is a synonym for   int
          ptr   is a synonym for   pointer
          ref   is a synonym for   reference
          ret   is a synonym for   returning
    structure   is a synonym for   struct
       vector   is a synonym for   array
.fi
.PP
The TAB completion feature only knows about the keywords in the right
column of the structure, not the ones in the left column.
TAB completion is a lot less useful when the leading characters of
different keywords are the same (the keywords confict with one another),
and putting both columns in would cause quite a few conflicts.
.SH GRAMMAR
The following grammar describes the language.
In the grammar, words in "<>" are non-terminals,
bare lower-case words are terminals that stand for themselves.
Bare upper-case words are other lexical tokens:
NOTHING means the empty string;
NAME means a C identifier;
NUMBER means a string of decimal digits; and
NL means the new-line or semi-colon characters.
.cS
  <program> ::= NOTHING
    | <program> <stmt> NL
  <stmt>  ::= NOTHING
    | declare NAME as <adecl>
    | declare <adecl>
    | cast NAME into <adecl>
    | cast <adecl>
    | explain <optstorage> <ptrmodlist> <type> <cdecl>
    | explain <storage> <ptrmodlist> <cdecl>
    | explain ( <ptrmodlist> <type> <cast> ) optional-NAME
    | set <options>
    | help | ?
    | quit
    | exit
  <adecl> ::= array of <adecl>
    | array NUMBER of <adecl>
    | function returning <adecl>
    | function ( <adecl-list> ) returning <adecl>
    | <ptrmodlist> pointer to <adecl>
    | <ptrmodlist> pointer to member of class NAME <adecl>
    | <ptrmodlist> reference to <adecl>
    | <ptrmodlist> <type>
  <cdecl> ::= <cdecl1>
    | * <ptrmodlist> <cdecl>
    | NAME :: * <cdecl>
    | & <ptrmodlist> <cdecl>
  <cdecl1>  ::= <cdecl1> ( )
    | <cdecl1> ( <castlist> )
    | <cdecl1> [ ]
    | <cdecl1> [ NUMBER ]
    | ( <cdecl> )
    | NAME
  <cast>  ::= NOTHING
    | ( )
    | ( <cast> ) ( )
    | ( <cast> ) ( <castlist> )
    | ( <cast> )
    | NAME :: * <cast>
    | * <cast>
    | & <cast>
    | <cast> [ ]
    | <cast> [ NUMBER ]
  <type>  ::= <typename> | <modlist>
    | <modlist> <typename>
    | struct NAME | union NAME | enum NAME | class NAME
  <castlist>  ::= <castlist> , <castlist>
    | <ptrmodlist> <type> <cast>
    | <name>
  <adecllist> ::= <adecllist> , <adecllist>
    | NOTHING
    | <name>
    | <adecl>
    | <name> as <adecl>
  <typename>  ::= int | char | double | float | void
  <modlist> ::= <modifier> | <modlist> <modifier>
  <modifier>  ::= short | long | unsigned | signed | <ptrmod>
  <ptrmodlist>  ::= <ptrmod> <ptrmodlist> | NOTHING
  <ptrmod>  ::= const | volatile | noalias
  <storage> ::= auto | extern | register | static
  <optstorage>  ::= NOTHING | <storage>
  <options> ::= NOTHING | <options>
    | create | nocreate
    | prompt | noprompt
    | ritchie | preansi | ansi | cplusplus
    | debug | nodebug | yydebug | noyydebug
.cE 0
.SH "SET OPTIONS"
The
.I set
command takes several options.
You can type
.IR set " or " "set options"
to see the currently selected options and a summary of the options which
are available.
The first four correspond to the
.IR -a ", " -p ", " -r ", and " -+
command line options, respectively.
.IP ansi
Use the ANSI C dialect of the C language.
.IP preansi
Use the pre-ANSI dialect defined by Kernighan & Ritchie's book.
.IP ritchie
Use the dialect defined by the Ritchie PDP-11 C compiler.
.IP cplusplus
Use the C++ language, rather than C.
.IP [no]prompt
Turn on or off the prompt in interactive mode.
.IP [no]create
Turn on or off the appending of semicolon or curly braces to the
declarations output by
.IR cdecl .
This corresponds to the
.I -c
command line option.
.IP [no]debug
Turn on or off debugging information.
.IP [no]yydebug
Turn on or off YACC debugging information.
.PP
Note: debugging information and YACC debugging information are only
available if they have been compiled into
.IR cdecl .
The last two options correspond to the
.IR -d " and " -D
command line options, respectively.
Debugging information is normally used in program development, and
is not generally compiled into distributed executables.
.SH EXAMPLES
.de Ex
.    PP
.    RS
..
.de Ee
.    RE
.    PP
..
To declare an array of pointers to functions that are like
.IR malloc (3),
do
.Ex
declare fptab as array of pointer to function returning pointer to char
.Ee
The result of this command is
.Ex
char *(*fptab[])()
.Ee
When you see this declaration in someone else's code, you
can make sense out of it by doing
.Ex
explain char *(*fptab[])()
.Ee
The proper declaration for signal(2), ignoring function prototypes, is easily
described in
.IR cdecl 's
language:
.Ex
declare signal as function returning pointer to function returning void
.Ee
which produces
.Ex
void (*signal())()
.Ee
The function declaration that results has two sets of empty parentheses.
The author of such a function might wonder where to put the parameters:
.Ex
declare signal as function (arg1,arg2) returning pointer to function returning
void
.Ee
provides the following solution (when run with the
.I \-c
option):
.Ex
void (*signal(arg1,arg2))()
{
}
.Ee
If we want to add in the function prototypes, the function prototype for a
function such as _exit(2) would be declared with:
.Ex
declare _exit as function (retvalue as int) returning void
.Ee
giving
.Ex
void _exit(int retvalue)
{
}
.Ee
As a more complex example using function prototypes, signal(2) could be fully
defined as:
.Ex
declare signal as function(x as int, y as pointer to function(int)
returning void) returning pointer to function(int) returning void
.Ee
giving (with \-c)
.Ex
void (*signal(int x, void (*y)(int )))(int )
{
}
.Ee
.I Cdecl
can help figure out the where to put the "const" and "volatile" modifiers
in declarations, thus
.Ex
declare foo as pointer to const int
.Ee
gives
.Ex
const int *foo
.Ee
while
.Ex
declare foo as const pointer to int
.Ee
gives
.Ex
int * const foo
.Ee
.I C++decl
can help with declaring references, thus
.Ex
declare x as reference to pointer to character
.Ee
gives
.Ex
char *&x
.Ee
.I C++decl
can help with pointers to member of classes, thus
declaring a pointer to an integer member of a class X with
.Ex
declare foo as pointer to member of class X int
.Ee
gives
.Ex
int X::*foo
.Ee
and
.Ex
declare foo as pointer to member of class X function (arg1, arg2) returning
pointer to class Y
.Ee
gives
.Ex
class Y *(X::*foo)(arg1, arg2)
.Ee
.SH DIAGNOSTICS
The declare, cast and explain statements try to point out constructions that
are not supported in C.
In some cases, a guess is made as to what was really intended.
In these cases, the C result is a toy declaration whose semantics will work
only in Algol-68.
The list of unsupported C constructs is dependent on which version of the C
language is being used (see the ANSI, pre-ANSI, and Ritchie options).
The set of supported C++ constructs is a superset of the ANSI set, with the
exception of the
.B noalias
keyword.
.SH EXIT STATUS
.PD 0
.IP 0
Success.
.IP 64
Command-line usage error.
.IP 65
Syntax or semantic error.
.IP 66
Open file error.
.IP 70
Internal software error.
(Please report the bug.)
.IP 71
System error.
.IP 73
Create file error.
.IP 74
I/O error.
.PD
.SH ENVIRONMENT
.TP 4
.B CDECL_COLORS
This variable specifies the colors and other attributes
used to highlight various parts of the output
in a manner similar to the
.B GCC_COLORS
variable
used by
.BR gcc .
.IP ""
As with
.BR gcc ,
the value is composed of a colon-separated sequence of capabilities.
Each capability is of the form
.IR name [= SGR ]
where
.I name
is a capability name
and
.IR SGR ,
if present,
is a
``Select Graphic Rendition''
value
that is a semicolon-separated list of integers
in the range 0\-255.
An example SGR value is \f(CW31;1\f1
that specifies a bright red foreground
on the terminal's default background.
.IP ""
Capability names in upper-case are unique to
.BR cdecl ;
those in lower-case are upwards compatibile with
.BR gcc .
.RS
.TP 8
.BI bn= SGR
SGR for the byte offset
(as with
.BR grep ).
The default is \f(CW36\f1
(green foreground over current terminal background).
.TP
.BI EC= SGR
SGR for elided rows and byte counts.
The default is \f(CW35\f1
(magenta foreground over current terminal background).
.TP
.BI MA= SGR
SGR for matched ASCII characters.
The default is \f(CW41;1\f1
(current terminal foreground over a bright red background).
.TP
.BI MH= SGR
SGR for matched hexadecimal.
The default is \f(CW41;1\f1
(current terminal foreground over a bright red background).
.TP
.BI MB= SGR
SGR for both matched ASCII and hexadecimal.
(This capability is the same as specifying both the
.B MA
and
.B MH
capabilities
with the same
.IR SGR ).
.TP
.BI mt= SGR
Same as
.B MB
(for compatibility with
.BR gcc ).
.TP
.B ne
Boolean value that,
when true,
prevents clearing to the end of a line using the Erase in Line
(EL)
SGR escape sequence
(as with
.BR gcc ).
.IP ""
This is needed on terminals on which EL is not supported.
It is otherwise useful on terminals for which the
.B back_color_erase
(BCE)
Boolean terminfo capability does not apply,
when the chosen highlight colors do not affect the background,
or when EL is too slow or causes too much flicker.
The default is false
(i.e., EL is used for clearing to the end of a line).
.TP
.BI se= SGR
SGR for the ``\f(CW:\f1'' and ``\f(CW-\f1'' separators
(as with
.BR gcc ).
The default is \f(CW36\f1
(cyan foreground over current terminal background).
.RE
.IP ""
Other
.B gcc
capabilities, if present, are ignored
because they don't apply in
.BR cdecl .
The term ``color'' is used loosely.
In addition to colors,
other character attributes
such as bold, underlined, reverse video, etc.,
may be possible depending on the capabilities of the terminal.
.TP
.B GCC_COLORS
This variable is used for compatibility with newer versions of
.BR gcc .
It is used exactly as
.B CDECL_COLORS
but only when
.B CDECL_COLORS
is either unset or empty.
Capabilities in
.B grep
that are unsupported by
.B cdecl
(because they don't apply)
are ignored.
.TP
.B TERM
The type of the terminal on which
.B cdecl
is being run.
.SH CAVEATS
The pseudo-English syntax is excessively verbose.
.PP
.IR Cdecl 's
scope is intentionally small.
.I Cdecl
doesn't know anything about variable length argument lists.
(This includes the
.RI `` ,... ''
syntax.)
.PP
.I Cdecl
thinks all the declarations you utter are going to be used as external
definitions.
Some declaration contexts in C allow more flexibility than this.
An example of this is:
.Ex
declare argv as array of array of char
.Ee
where
.I cdecl
responds with
.Ex
.nf
Warning: Unsupported in C -- 'Inner array of unspecified size'
        (maybe you mean "array of pointer")
char argv[][]
.fi
.Ee
.PP
Tentative support for the
.I noalias
keyword was put in because it was in the draft ANSI specifications.
.SH AUTHORS
In reverse chronological order:
.TP 4
.BI "Paul J. Lucas <" paul@lucasmail.orog ">"
Converted to C99;
converted to GNU autoconf build;
added GNU-style test suite and many more tests;
added more semantic checks;
added support for
long options,
\f(CWbool\fP,
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
\f(CWcomplex\fP,
\f(CWrestrict\fP,
\f(CW_Thread_local\fP,
\f(CWwchar_t\fP,
\f(CWregister\fP and variadic function arguments,
\f(CWtypedef\fP declarations,
and
octal and hexadecimal array sizes.
.TP
.BI "Peter Ammon <" cdecl@ridiculousfish.com ">"
Added support for Apple's ``blocks'' syntax.
.TP
.BI "David R. Conrad <" conrad@detroit.freenet.org ">"
Ported to Linux
and
added GNU readline support.
.TP
.B Merlyn LeRoy
Added support for
\f(CWextern\f1,
\f(CWregister\f1,
\f(CWstatic\f1;
separately converted to ANSI C.
.TP
.B Tony Hansen
TODO
.TP
.B David Wolverton
Converted to ANSI C.
.TP
.B Graham Ross
Original author.
.SH SEE ALSO
.BR bison (1),
.BR clang (1),
.BR gcc (1),
.BR vi (1),
.BR yacc (1),
.BR isatty (3),
.BR readline (3),
.BR sysexits (3)
.\" vim:set et sw=2 ts=2:
