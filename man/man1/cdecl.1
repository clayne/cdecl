.\"
.\"     cdecl -- C gibberish translator
.\"     cdecl.1: manual page
.\"
.\" ---------------------------------------------------------------------------
.\" define code-start macro
.de cS
.sp
.nf
.RS 5
.ft CW
..
.\" define code-end macro
.de cE
.ft 1
.RE
.fi
.if !'\\$1'0' .sp
..
.\" ---------------------------------------------------------------------------
.TH \f3cdecl\fP 1 "March 29, 2017" "PJL TOOLS"
.SH NAME
cdecl, c++decl \- compose and decipher C & C++ declarations and casts
.SH SYNOPSIS
.B cdecl
.BI [ options ]
.BI [ file " " ... ]
.br
.B c++decl
.BI [ options ]
.BI [ file " " ... ]
.br
.B cast
.BI [ options ]
.I english
.br
.B declare
.BI [ options ]
.I english
.br
.B explain
.BI [ options ]
.I gibberish
.SH DESCRIPTION
\f2``I'm still uncertain about the language declaration syntax,
where in declarations,
syntax is used that mimics the use of the variables being declared.
It is one of the things that draws strong criticism,
but it has a certain logic to it.''\fP
.PD 0
.IP
\(em Dennis M. Ritchie

.P
.PD
.I ``I consider the C declarator syntax an experiment that failed.''
.PD 0
.IP
\(em Bjarne Stroustrup
.PD
.PP
.B cdecl
is a program for composing and deciphering C (or C++)
type declarations
or casts,
aka ``gibberish.''
It can be used interactively on a terminal
or accept input from either the command line or standard input.
.SH INVOCATION
.SS Executable Name
.B cdecl
may be invoked
under a number of different names
(by either renaming the executable
or creating either a symbolic or hard link to it).
If it is invoked as:
.TP 9
.B cdecl
Runs with C11 as the default language.
.TP
.BR c++decl " | " cppdecl " | " cxxdecl
Runs with C++11 as the default language.
.TP
.BR cast " | " declare
Interprets the rest of the command-line
(if given)
as pseudo-English,
performs the conversion to gibberish,
and exits.
.TP
.B explain
Interprets the rest of the command-line
(if given)
as gibberish,
performs the conversion to pseudo-English,
and exits.
.P
For example
(where \f(CW$\fP is the shell prompt):
.cS
$ declare p as pointer to const pointer to const int
const int *const *p;
.cE
When using
.BR explain ,
care must be taken either to escape or quote shell metacharacters:
.cS
$ explain 'int *const (*p)[4]'
declare p as pointer to array 4 of const pointer to int
.cE 0
.SS First Argument
.B cdecl
will also behave as above
if the first non-option argument on the command-line
is one of
.BR cast ,
.BR declare ,
or
.BR explain .
.SS Standard Input
If no file names are given,
or a file name of ``\f(CW-\fP'' is encountered,
standard input will be read
until end-of-file is encountered
or either the
.BR exit ,
.BR q ,
or
.B quit
command is given.
.PP
You can use
.B cdecl
as you create a C (or C++) program from within an editor.
For example,
in
.BR vi (1),
type the declaration in pseudo-English,
then filter the line through
.BR cdecl :
.cS
!!cdecl<cr>
.cE
where \f(CW<cr>\fP is a carriage-return.
.SS Interactive Input
If standard input is coming from a terminal
(or either the
.B \-\-interactive
or
.B \-i
option is specified),
a prompt of either
\f(CWcdecl>\fP
or
\f(CWc++decl>\fP
will be written to the terminal before each line of input.
The prompt can be turned off by either the
.B \-\-quiet
or
.B \-q
option,
or the
.B set noprompt
command.
.PP
.B cdecl
uses the GNU
.BR readline (3)
library
to provide keyword completion,
command-line history,
and
editing.
.SS File Input
.B cdecl
reads the named files for statements in the language described below.
A transformation is made from that language to C (C++) or pseudo-English.
The results of this transformation are written on standard output.
.SH OPTIONS
An option argument
.I n
means
.I "unsigned integer"
and
.I s
means
.IR string .
If
.I n
starts with
.BR 0 ,
then it is interpreted as octal;
if
.I n
starts with either
.B 0x
or
.BR 0X ,
then
.I n
is interpreted as hexedecimal.
.TP 8
.BR \-\-c89 " | " \-8
Shorthand for either
.B \-\-language=c89
or
.BR \-xc89 .
.TP
.BR \-\-c99 " | " \-9
Shorthand for either
.B \-\-language=c99
or
.BR \-xc99 .
.TP
.BR \-\-c++ " | " \-c
Shorthand for either
.B \-\-language=c++
or
.BR \-xc++ .
.TP
.BR \-\-debug " | " \-d
Turns on debugging output (if compiled in).
The additional JSON-like output is of an abstract syntax tree
as it is being constructed
from user input
while the parser is reducing grammar productions.
(This is a debugging aid for developers of
.B cdecl
itself.)
.TP
.BR \-\-file \f1=\fPf "\f1 | \fP" "" \-f " f"
Reads commands from file
.IR f .
.TP
.BR \-\-interactive " | " \-i
Forces interactive mode,
that is
turns on prompting
and
enables line-editing and history.
(This is the default when connected to a terminal.)
.TP
.BR \-\-knr " | " \-k
Shorthand for either
.B \-\-language=knr
or
.BR \-xknr .
.TP
.BR \-\-lang \f1=\fPs "\f1 | \fP" "" \-x " s"
Specifies which dialect of what language
.I s
(which is case-insensitive)
to use.
The choices for
.I s
are:
.RS
.TP 7
.B KNR
Use the pre-ANSI Kernighan & Ritchie dialect of the C language
as given in the first edition of
.IR "The C Programming Language" .
.TP
.B C89
Use the C89 (ANSI C) dialect of the C language.
Adds support for
\f(CWconst\fP,
\f(CWenum\fP,
\f(CWsigned\fP,
\f(CWvoid\fP,
and
\f(CWvolatile\fP.
.TP
.B C99
Use the C99 dialect of the C language.
Adds support for
\f(CW_Bool\fP (and \f(CWbool\fP),
\f(CW_Complex\fP (and \f(CWcomplex\fP),
\f(CWrestrict\fP,
and
\f(CWwchar_t\fP.
.TP
.B C11
Use the C11 dialect of the C language.
Adds support for
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
and
\f(CW_Thread_local\fP
and (\f(CWthread_local\fP).
.TP
.B C++03
Use the C++03 dialect of the C++ language.
Adds support for
\f(CWclass\fP,
references,
and pointers to class members.
.TP
.B C++11
Use the C++11 dialect of the C++ language.
Adds support for
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
and
\f(CWthread_local\fP.
.RE
.IP ""
The default is
.B C11
(for
.BR cdecl )
and
.B C++11
(for
.BR c++decl ).
.TP
.BR \-\-no-semicolon " | " \-s
Suppresses printing of a trailing semicolon for C & C++ declarations.
.TP
.BR \-\-output \f1=\fPf "\f1 | \fP" "" \-o " f"
Sends all non-error output to file
.IR f .
.TP
.BR \-\-quiet " | " \-q
Be quiet by suppressing the prompt in interactive mode.
.TP
.BR \-\-version " | " \-v
Prints the version number to standard error
and exits.
.TP
.BR \-\-yydebug " | " \-y
Turns on
.BR bison (1)
debugging output (if compiled in).
The additional output is of grammar productions
as they are being reduced by the parser.
(This is a debugging aid for developers of
.B cdecl
itself.)
.SH LANGUAGE
.SS Commands
.B cdecl
has the following commands:
.RS 4
.TP 4
.BI cast " name" " into" " english"
Composes a C (or C++) cast from pseudo-English.
.TP
.BI declare " name" " as" " english"
Composes a C (or C++) declaration from pseudo-English.
.TP
.BI explain " gibberish"
Deciphers a C (or C++) declaration into pseudo-English.
.TP
.BR "explain (" \f2gibberish\fP ")" [ \f2name\fP ]
Deciphers a C (or C++) cast into pseudo-English.
.TP
.BR set " [" \f2option\fP "] | " "set options"
In the first form,
sets a particular option, if given;
if not,
it's equivalent to the second form
that prints the current value of all options.
.TP
.BR help " | " ?
Prints a
.B cdecl
language summary
(see
.B LANGUAGE
below)
that's sensitive to the current programming language
(C or C++).
.TP
.BR exit " | " quit " | " q
Quits
.BR cdecl .
.RE
.P
Each command is terminated by either a semicolon or newline.
.SS English
In what follows,
| means alternate,
[] means optional,
and
{} means one or more.
.P
.I English
is one of:
.IP "" 4
.BR array " [" \f2number\fP "] " of " \f2english\fP"
.br
.BR block " [" ( \f2decl-list\fP ) "] " returning " \f2english\fP"
.br
.BR function " [" ( \f2decl-list\fP ) "] " returning " \f2english\fP"
.br
.RB [{ \f2qualifier\fP "}] " "pointer to" " [" "member of class" " \f2name\fP" ] " \f2english\fP"
.br
.I type
.P
and
.I type
is either:
.IP "" 4
.RI [ storage-class "] [{" modifier "}] [" C-type ]
.br
.RB [{ enum " | " class " | " struct " | " union }] " \f2name\fP"
.P
where:
.RS 4
.TP 15
.I C-type
One of:
\f(CWbool\fP,
\f(CWchar\fP,
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
\f(CWwchar_t\fP,
\f(CWint\fP,
\f(CWfloat\fP,
\f(CWdouble\fP,
or
\f(CWvoid\fP.
.TP
.I decl-list
A comma-separated list of
.IR name ,
.IR english ,
or
.IR name " as " english .
.TP
.I modifier
One of:
\f(CWshort\fP,
\f(CWlong\fP,
\f(CWsigned\fP,
\f(CWunsigned\fP,
\f(CWconst\fP,
\f(CWvolatile\fP,
or
\f(CWrestrict\fP.
.TP
.I name
A valid C (or C++) identifier.
.TP
.I number
One of a
decimal,
octal (if starting with \f(CW0\fP),
or
hexadecimal (if starting with either \f(CW0x\fP or \f(CW0X\fP)
number.
.TP
.I qualifier
One of:
\f(CWconst\fP,
\f(CWrestrict\fP,
or
\f(CWvolatile\fP.
.TP
.I storage-class
One of:
\f(CWauto\fP,
\f(CWextern\fP,
\f(CWregister\fP,
\f(CWstatic\fP,
or
\f(CW_Thread_local.
.RE
.SS Gibberish
TODO
.SS Synonyms
Some synonyms are permitted within pseudo-English.
The words on the left are synonyms for what's on the right:
.cS
       bool  _Bool
  character  char
    complex  _Complex
   constant  const
enumeration  enum
       func  function
    integer  int
        mbr  member
        ptr  pointer
        ref  reference
 restricted  restrict
        ret  returning
  structure  struct
       type  typedef
    varargs  ...
   variadic  ...
     vector  array
.cE 0
.SS Set Options
The
.B set
command takes several options:
.RS 4
.TP 7
.B c
Use the latest supported dialect of the C language.
.TP
.BR cknr " | " knr " | " knrc
Sets the language to the pre-ANSI Kernighan & Ritchie dialect of the C language
as given in the first edition of
.IR "The C Programming Language" .
.TP
.B c89
Use the C89 (ANSI C) dialect of the C language.
.TP
.B c99
Use the C99 dialect of the C language.
.TP
.B c11
Use the C11 dialect of the C language.
.TP
.B c++
Use the latest supported dialect of the C++ language.
.TP
.B c++03
Use the C++03 dialect of the C++ language.
.TP
.B c++11
Use the C++11 dialect of the C++ language.
.TP
.RB [ no ] debug
Turns [off] or on debugging output.
(Default is off.)
.TP
.RB [ no ] prompt
Turns [off] or on the prompt.
(Default is on.)
.TP
.RB [ no ] semicolon
Turns [off] or on printing a semicolon at the end of a C (or C++) declaration.
(Default is on.)
.TP
.RB [ no ] yydebug
Turns [off] or on
.BR bison (1)
debugging output.
(Default is off.)
.RE
.PP
Note that debugging information and
.BR bison (1)
debugging information are available
only if they have been compiled into
.IR cdecl .
.SH EXAMPLES
To declare an array of pointers to functions that are like
.IR malloc (3),
do
.cS
declare fptab as array of pointer to function returning pointer to char
.cE
The result of this command is
.cS
char *(*fptab[])()
.cE
When you see this declaration in someone else's code, you
can make sense out of it by doing
.cS
explain char *(*fptab[])()
.cE
The proper declaration for signal(2), ignoring function prototypes, is easily
described in
.IR cdecl 's
language:
.cS
declare signal as function returning pointer to function returning void
.cE
which produces
.cS
void (*signal())()
.cE
The function declaration that results has two sets of empty parentheses.
The author of such a function might wonder where to put the parameters:
.cS
declare signal as function (arg1,arg2) returning pointer to function returning
void
.cE
provides the following solution:
.cS
void (*signal(arg1,arg2))();
.cE
If we want to add in the function prototypes, the function prototype for a
function such as _exit(2) would be declared with:
.cS
declare _exit as function (retvalue as int) returning void
.cE
giving:
.cS
void _exit(int retvalue);
.cE
As a more complex example using function prototypes, signal(2) could be fully
defined as:
.cS
declare signal as function
    (sig as int, f as pointer to function (int) returning void)
    returning pointer to function (int) returning void
.cE
giving:
.cS
void (*signal(int sig, void (*f)(int)))(int);
.cE
.B cdecl
can help figure out the where to put the "const" and "volatile" modifiers
in declarations:
.cS
cdecl> declare p as pointer to const int
const int *p;
.cE
while:
.cS
cdecl> declare p as const pointer to int
int *const p;
.cE
.B c++decl
can help with declaring references:
.cS
c++decl> declare r as reference to pointer to char
char *&r;
.cE
.B c++decl
can help with pointers to member of classes:
.cS
c++decl> declare p as pointer to member of class C int
int C::*p;
.cE
and:
.cS
declare p as pointer to member of class C
    function (i as int, j as int)
    returning pointer to class D
.cE
gives:
.cS
class D *(C::*p)(int i, int j)
.cE
.SH EXIT STATUS
.PD 0
.IP 0
Success.
.IP 64
Command-line usage error.
.IP 65
Syntax or semantic error.
.IP 66
Open file error.
.IP 70
Internal software error.
(Please report the bug.)
.IP 71
System error.
.IP 73
Create file error.
.IP 74
I/O error.
.PD
.SH ENVIRONMENT
.TP 4
.B CDECL_COLORS
This variable specifies the colors and other attributes
used to highlight various parts of the output
in a manner similar to the
.B GCC_COLORS
variable
used by
.BR gcc .
.IP ""
As with
.BR gcc ,
the value is composed of a colon-separated sequence of capabilities.
Each capability is of the form
.IR name [= SGR ]
where
.I name
is a capability name
and
.IR SGR ,
if present,
is a
``Select Graphic Rendition''
value
that is a semicolon-separated list of integers
in the range 0\-255.
An example SGR value is \f(CW31;1\f1
that specifies a bright red foreground
on the terminal's default background.
.IP ""
Capability names in upper-case are unique to
.BR cdecl ;
those in lower-case are upwards compatibile with
.BR gcc .
.RS
.TP 18
.BI caret= SGR
SGR for the caret pointing to the error on the line above
(as with
.BR gcc ).
The default is \f(CW36;1\f1
(bright green foreground over current terminal background).
.TP
.BI error= SGR
SGR for the word ``error.''
The default is \f(CW31;1\f1
(bright red foreground over current terminal background).
.TP
.BI HELP-keyword= SGR
SGR for keywords in help output.
The default is \f(CW;1\f1
(bold terminal foreground current terminal background).
.TP
.BI HELP-nonterm= SGR
SGR for nonterminals in help output.
The default is \f(CW36\f1
(cyan foreground over current terminal background).
.TP
.BI HELP-punct= SGR
SGR for punctuation in help output.
The default is \f(CW30;1\f1
(dark dray forgreound over current terminal background).
.TP
.BI HELP-title= SGR
SGR for titles in help output.
The default is \f(CW34;1\f1
(bright blue foreground over current termianl background).
.TP
.BI PROMPT= SGR
SGR for the prompt.
The default is \f(CW32\f1
(green foreground over current terminal background).
.TP
.BI warning= SGR
SGR for the word ``warning.''
The default is \f(CW33;1\f1
(bright yellow foreground over current terminal background).
.RE
.IP ""
Other
.B gcc
capabilities, if present, are ignored
because they don't apply in
.BR cdecl .
The term ``color'' is used loosely.
In addition to colors,
other character attributes
such as bold, underlined, reverse video, etc.,
may be possible depending on the capabilities of the terminal.
.TP
.B GCC_COLORS
This variable is used for compatibility with
.BR gcc .
It is used exactly as
.B CDECL_COLORS
but only when
.B CDECL_COLORS
is either unset or empty.
Capabilities in
.B gcc
that are unsupported by
.B cdecl
(because they don't apply)
are ignored.
.TP
.B TERM
The type of the terminal on which
.B cdecl
is being run.
.SH BUGS
On macOS (up through to at least version 10.12, aka
.IR Sierra ),
the
.BR readline (3)
API is provided,
but backed by
.B libedit
that has a bug that prevents color prompts from working correctly.
As such,
the
.B PROMPT
color cabapility is ignored on systems
that do not provide genuine GNU
.BR readline (3).
.SH CAVEATS
.nr step 1 1
.IP \n[step]. 3
The pseudo-English syntax is excessively verbose.
.IP \n+[step].
When converting from pseudo-English to a C++ declaration,
\f(CWenum\fP,
\f(CWclass\fP,
\f(CWstruct\fP,
and
\f(CWunion\fP,
types include the corresponding keyword explicitly in the result
even though it isn't needed in C++:
.cS
c++decl> declare p as pointer to struct S
struct S *p;
.cE 0
.IP ""
This is because,
when going the other way from a C++ declaration to pseudo-English,
the declaration parser can't know that an arbitrary name,
in this example, \f(CWS\fP, is one of an
\f(CWenum\fP,
\f(CWclass\fP,
\f(CWstruct\fP,
or
\f(CWunion\fP
name.
While the keyword
.I could
be elided,
it isn't in order to have the output be ``round-trippable''
when used as input to
.BR explain .
.SH AUTHORS
In reverse chronological order:
.TP 4
.BI "Paul J. Lucas <" paul@lucasmail.org ">"
Converted to C99;
converted to GNU autoconf build;
added GNU-style test suite and many more tests;
added more semantic checks;
added support for
long options,
\f(CWbool\fP,
\f(CWchar16_t\fP,
\f(CWchar32_t\fP,
\f(CWcomplex\fP,
\f(CWrestrict\fP,
\f(CW_Thread_local\fP,
\f(CWwchar_t\fP,
\f(CWregister\fP and variadic function arguments,
\f(CWtypedef\fP declarations,
and
octal and hexadecimal array sizes.
.TP
.BI "Peter Ammon <" cdecl@ridiculousfish.com ">"
Added support for Apple's ``blocks'' syntax.
.TP
.BI "David R. Conrad <" conrad@detroit.freenet.org ">"
Ported to Linux and added GNU
.BR readline (3)
support.
.TP
.BI "Tony Hansen <" tony@attmail.com ">"
Merged version from Merlyn LeRoy;
added
.BR tmpfile (3)
support;
allowed more parts to be missing during explanations.
.TP
.B Merlyn LeRoy
Added support for
\f(CWextern\f1,
\f(CWregister\f1,
and
\f(CWstatic\f1;
separately converted to ANSI C.
.TP
.BI "Tony Hansen <" tony@attmail.com ">"
Merged David Wolverton's and <unknown author>'s versions;
added
function prototypes,
better \f(CWvoid\fP support,
C++ declarations,
synonyms,
file parsing,
prompts when on a TTY or interactive mode,
initial help message,
.B set options
command,
.B quit
and
.B exit
commands;
made ``create program'' feature a runtime option;
made type-checking table-driven;
added
.BR getopt (3)
usage;
added original
.BR \-a ,
.BR \-c,
.BR \-d,
.BR \-D,
.BR \-i
.BR \-p,
.BR \-r,
.BR \-V,
and
.BR -+
options;
added
\f(CW#define\fPs for those without
.BR getopt (3)
or
\f(CWvoid\fP.
.TP
.B David Wolverton
Converted to ANSI C.
.TP
.B <unknown author>
Added function argument lists,
hints,
.B explain cast
grammar,
and
``create program'' feature via \f(CW#ifdef\fP.
.TP
.B Graham Ross
Original author.
.SH SEE ALSO
.BR bison (1),
.BR clang (1),
.BR gcc (1),
.BR vi (1),
.BR yacc (1),
.BR isatty (3),
.BR readline (3),
.BR sysexits (3)
.\" vim:set et sw=2 ts=2:
