cdecl> #define debug(...)            fprintf(stderr, __VA_ARGS__)
cdecl> #define showlist(...)         puts(#__VA_ARGS__)
cdecl> #define report(test, ...)     ((test)?puts(#test): printf(__VA_ARGS__))
cdecl> 
cdecl> expand debug("Flag")
debug("Flag") => fprintf(stderr, __VA_ARGS__)
| __VA_ARGS__ => "Flag"
debug("Flag") => fprintf(stderr, "Flag")
cdecl> expand debug("X = %d\n", x)
debug("X = %d\n", x) => fprintf(stderr, __VA_ARGS__)
| __VA_ARGS__ => "X = %d\n", x
debug("X = %d\n", x) => fprintf(stderr, "X = %d\n", x)
cdecl> expand showlist(The first, second, and third items.)
showlist(The first, second, and third items.) => puts(#__VA_ARGS__)
| __VA_ARGS__ => The first, second, and third items.
showlist(The first, second, and third items.) => puts("The first, second, and third items.")
cdecl> expand report(x>y, "x is %d but y is %d", x, y)
report(x>y, "x is %d but y is %d", x, y) => ((test)?puts(#test): printf(__VA_ARGS__))
report(x>y, "x is %d but y is %d", x, y) => ((test)?puts("x>y"): printf(__VA_ARGS__))
| test => x>y
report(x>y, "x is %d but y is %d", x, y) => ((x>y)?puts("x>y"): printf(__VA_ARGS__))
| __VA_ARGS__ => "x is %d but y is %d", x, y
report(x>y, "x is %d but y is %d", x, y) => ((x>y)?puts("x>y"): printf( "x is %d but y is %d", x, y))
