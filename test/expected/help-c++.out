[] = 0 or 1; * = 0 or more; {} = one of; | = alternate; <> = defined elsewhere
command:
  explain <gibberish>        | declare { <name> | <operator> } as <english>
  [const | dynamic | reinterpret | static] cast <name> into <english>
  define <name> as <english> | typedef <gibberish> | using <name> = <gibberish>
  show { <name> | all | predefined | user } [typedef] | set [options]
  <scope-c> <name> { {<scope-c>|<typedef>|<using>}; } | {help|?} | {exit|quit|q}
english:
  <store>* array [<number>] of <english>
  block [([<args>])] [returning <english>]
  <store>* <fn-qual>* [[non-]member] function [([<args>])] [returning <english>]
  <store>* <fn-qual>* [[non-]member] operator [([<args>])] [returning <english>]
  <cv-qual>* pointer to [member of {class|struct} <name>] <english>
  rvalue] reference to <english> | <store>* <modifier>* [<C++-type>]
  { enum [class|struct] | class | struct | union } <name>
args: a comma separated list of <english> or <name> as <english>
gibberish: a C++ declaration, like "int x"; or cast, like "(int)x"
C++-type: bool char char16_t char32_t wchar_t int float double void
cv-qual: const volatile         | fn-qual: const volatile [rvalue] reference
modifier: short long signed unsigned const volatile
name: a C++ identifier; or <name>[::<name>]* or <name> [of <scope-e> <name>]*
scope-c: class struct union [inline] namespace | scope-e: <scope-c> scope
store: const{eval|expr} extern friend mutable static thread_local [pure] virtual
