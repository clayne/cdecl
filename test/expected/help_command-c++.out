command:
  [const | dynamic | reinterpret | static] cast <name> {as|[in]to} <english>
  declare <name> as <english> [width <number> [bits]]
  declare <name> as <english> align[ed] [as|to] {<number> [bytes] | <english>}
  declare <operator> as <english>
  declare [<english>] user-def[ined] <user-defined-english>
  define <name> as <english>
  explain <gibberish>
  { help | ? } [command[s] | english | options]
  set [<option> [= <value>] | options | <lang>]*
  show [<name>|[all] [predefined|user] [<glob>]] [[as] {english|typedef|using}]
  typedef <gibberish> [, <gibberish>]*
  <scope-c> <name> [{ [{ <scope-c> | <typedef> | <using> } ;]* }]
  using <name> = <gibberish>
  exit | q[uit]
gibberish: a C++ declaration, like "int x"; or a cast, like "(int)x"
scope-c: class | struct | union | [inline] namespace
where: [] = 0 or 1; * = 0 or more; + = 1 or more; {} = one of; | = alternate
