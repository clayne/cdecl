command:
  [const | dynamic | reinterpret | static] cast <name> {as|[in]to} <english>
  declare <name> [, <name>]* as <english> [<declare-options>]
  declare <operator> as <english>
  declare [<english>] user-def[ined] <user-defined-english>
  define <name> as <english>
  explain <gibberish> [, <gibberish>]*
  { help | ? } [command[s] | english | options]
  set [<option> [= <value>] | options | <lang>]*
  show [<name>|[all] [predefined|user] [<glob>]] [[as] {english|typedef}]
  type[def] <gibberish> [, <gibberish>]*
  <scope-c> <name> [{ [{ <scope-c> | <typedef> } ;]* }]
  exit | q[uit]
declare-options:
  width <number> [bits]
gibberish: a C++ declaration, like "int x"; or a cast, like "(int)x"
name: a C++ identifier: <name>[::<name>]* | <name> [of <scope-e> <name>]*
scope-c: class | struct | union | namespace
where: [] = 0 or 1; * = 0 or more; + = 1 or more; {} = one of; | = alternate
