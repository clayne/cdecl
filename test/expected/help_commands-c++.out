command:
  [const | dynamic | reinterpret | static] cast <name> into <english>
  declare <name> as <english> [aligned [as] {<number> [bytes] | <english>}]
  declare <operator> as <english>
  define <name> as <english>
  explain <gibberish>
  { help | ? } [command[s] | english]
  set [<option> | options]
  show { <name> | all | predefined | user } [typedef]
  typedef <gibberish>
  <scope-c> <name> { { <scope-c> | <typedef> | <using> } ; }
  using <name> = <gibberish>
  exit | quit | q
gibberish: a C++ declaration, like "int x"; or cast, like "(int)x"
option: [no]debug {di|tri|no}graphs <lang> [no]prompt [no]semicolon
scope-c: class struct union [inline] namespace
scope-e: { <scope-c> | scope }

where:
  [] = 0 or 1; * = 0 or more; {} = one of; | = alternate; <> = defined elsewhere
