cdecl> 
cdecl> typedef int I, *PI, A2[2], F_I(double), *F_PI(), (*PF_I)()
cdecl> typedef F_I *PF_I_2
cdecl> typedef void Void
cdecl> show as english
define A2 as array 2 of integer
define F_I as function (double precision) returning integer
define F_PI as function returning pointer to integer
define I as integer
define PF_I as pointer to function returning integer
define PF_I_2 as pointer to F_I
define PI as pointer to integer
define Void as void
cdecl> 
cdecl> typedef int int_least32_t
cdecl> typedef int Int
cdecl> typedef Int T
cdecl> typedef Int T
cdecl> 
cdecl> set c++
c++decl> 
c++decl> struct S1 { typedef int I; }
c++decl> explain S1::I x
declare x as I of structure S1
c++decl> typedef typename S1::I S1_T
c++decl> show
typedef int A2[2];
typedef int F_I(double);
typedef int* F_PI();
typedef int I;
typedef int Int;
typedef int (*PF_I)();
typedef F_I *PF_I_2;
typedef int *PI;
struct S1;
struct S1 { typedef int I; };
typedef S1::I S1_T;
typedef Int T;
typedef void Void;
c++decl> show as using
using A2 = int[2];
using F_I = int(double);
using F_PI = int*();
using I = int;
using Int = int;
using PF_I = int(*)();
using PF_I_2 = F_I*;
using PI = int*;
struct S1;
struct S1 { using I = int; };
using S1_T = S1::I;
using T = Int;
using Void = void;
c++decl> 
c++decl> struct S1 { typedef int typeof; }
                             ^
22,21: warning: "typeof" is a keyword in C23
c++decl> 
c++decl> define I1 of inline namespace B1 of namespace A1 as int
c++decl> show **::I1 typedef
namespace A1::inline B1 { typedef int I1; }
c++decl> 
c++decl> class C1 { class C1_C1 { typedef int Int; }; }
c++decl> 
c++decl> namespace A1::B1 { typedef int Int; }
c++decl> namespace A2::inline A2_B2 { typedef int Int; }
c++decl> namespace A3::inline A3_B3::A3_B3_C3 { typedef int Int; }
c++decl> namespace N1 { class N1_C1 { typedef int Int; }; }
c++decl> namespace N2 { namespace N2_N2 { typedef int Int; } }
c++decl> namespace N3 { struct N3_S3 { typedef int Int; }; }
c++decl> namespace N4 { union N4_U4 { typedef int Int; }; }
c++decl> namespace N5 { class C; };
c++decl> namespace N5 { enum C::E; }
c++decl> namespace N5 { typedef int TI; }
c++decl> namespace N5 { using UI = int; }
c++decl> inline namespace IN1 { typedef int Int; }
c++decl> show
define I1 of inline namespace B1 of namespace A1 as integer
namespace A1::B1 { typedef int Int; }
typedef int A2[2];
namespace A2::inline A2_B2 { typedef int Int; }
namespace A3::inline A3_B3::A3_B3_C3 { typedef int Int; }
class C1;
class C1 { class C1_C1; };
class C1::C1_C1 { typedef int Int; };
typedef int F_I(double);
typedef int* F_PI();
typedef int I;
inline namespace IN1 { typedef int Int; }
typedef int Int;
namespace N1 { class N1_C1; }
class N1::N1_C1 { typedef int Int; };
namespace N2::N2_N2 { typedef int Int; }
namespace N3 { struct N3_S3; }
struct N3::N3_S3 { typedef int Int; };
namespace N4 { union N4_U4; }
union N4::N4_U4 { typedef int Int; };
namespace N5 { class C; }
class N5::C { enum E; };
namespace N5 { typedef int TI; }
namespace N5 { using UI = int; }
typedef int (*PF_I)();
typedef F_I *PF_I_2;
typedef int *PI;
struct S1;
struct S1 { typedef int I; };
struct S1 { typedef int typeof; };
typedef S1::I S1_T;
typedef Int T;
typedef void Void;
c++decl> 
c++decl> using UI = int
c++decl> declare x as UI
UI x;
c++decl> explain UI x
declare x as UI
c++decl> 
c++decl> using int_least32_t = int
c++decl> 
c++decl> using Fi_v = void (*)(int)
c++decl> show Fi_v
using Fi_v = void(*)(int);
c++decl> 
c++decl> set c++14
c++decl> namespace A14 { namespace B14 { typedef int Int; } }
c++decl> show A14::*::Int
namespace A14 { namespace B14 { typedef int Int; } }
