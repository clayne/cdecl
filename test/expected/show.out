cdecl> typedef int Int
cdecl> 
cdecl> show
typedef int Int;
cdecl> show all
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef int Int;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *restrict, void *restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short _Accum int_hk_t;
typedef short _Fract int_hr_t;
typedef _Accum int_k_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long _Accum int_lk_t;
typedef long _Fract int_lr_t;
typedef _Fract int_r_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { using bfloat16_t = float; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { using mask = unsigned; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { using float128_t = double[2]; }
namespace std { using float16_t = float; }
namespace std { using float32_t = float; }
namespace std { using float64_t = double; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { using event_callback = void(*)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { using fmtflags = unsigned; };
class std::ios_base { using iostate = unsigned; };
class std::ios_base { using openmode = unsigned; };
class std::ios_base { using seekdir = int; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { using max_align_t = long double; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { using new_handler = void(*)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { using nullptr_t = void*; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { using ptrdiff_t = long; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { using error_type = unsigned; }
namespace std::regex_constants { using match_flag_type = unsigned; }
namespace std::regex_constants { using syntax_option_type = unsigned; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { using sig_atomic_t = int; }
namespace std { using size_t = unsigned long; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { using streamoff = long long; }
namespace std { using streamsize = long; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short _Accum uint_uhk_t;
typedef unsigned short _Fract uint_uhr_t;
typedef unsigned _Accum uint_uk_t;
typedef unsigned long _Accum uint_ulk_t;
typedef unsigned long _Fract uint_ulr_t;
typedef unsigned _Fract uint_ur_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
cdecl> show all predefined
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *restrict, void *restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short _Accum int_hk_t;
typedef short _Fract int_hr_t;
typedef _Accum int_k_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long _Accum int_lk_t;
typedef long _Fract int_lr_t;
typedef _Fract int_r_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { using bfloat16_t = float; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { using mask = unsigned; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { using float128_t = double[2]; }
namespace std { using float16_t = float; }
namespace std { using float32_t = float; }
namespace std { using float64_t = double; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { using event_callback = void(*)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { using fmtflags = unsigned; };
class std::ios_base { using iostate = unsigned; };
class std::ios_base { using openmode = unsigned; };
class std::ios_base { using seekdir = int; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { using max_align_t = long double; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { using new_handler = void(*)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { using nullptr_t = void*; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { using ptrdiff_t = long; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { using error_type = unsigned; }
namespace std::regex_constants { using match_flag_type = unsigned; }
namespace std::regex_constants { using syntax_option_type = unsigned; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { using sig_atomic_t = int; }
namespace std { using size_t = unsigned long; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { using streamoff = long long; }
namespace std { using streamsize = long; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short _Accum uint_uhk_t;
typedef unsigned short _Fract uint_uhr_t;
typedef unsigned _Accum uint_uk_t;
typedef unsigned long _Accum uint_ulk_t;
typedef unsigned long _Fract uint_ulr_t;
typedef unsigned _Fract uint_ur_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
cdecl> show all predefined atomic* as typedef
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
cdecl> show all typedef
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef int Int;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *restrict, void *restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short _Accum int_hk_t;
typedef short _Fract int_hr_t;
typedef _Accum int_k_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long _Accum int_lk_t;
typedef long _Fract int_lr_t;
typedef _Fract int_r_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { typedef float bfloat16_t; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { typedef unsigned mask; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { typedef double float128_t[2]; }
namespace std { typedef float float16_t; }
namespace std { typedef float float32_t; }
namespace std { typedef double float64_t; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { typedef void (*event_callback)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { typedef unsigned fmtflags; };
class std::ios_base { typedef unsigned iostate; };
class std::ios_base { typedef unsigned openmode; };
class std::ios_base { typedef int seekdir; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { typedef long double max_align_t; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { typedef void (*new_handler)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { typedef void *nullptr_t; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { typedef long ptrdiff_t; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { typedef unsigned error_type; }
namespace std::regex_constants { typedef unsigned match_flag_type; }
namespace std::regex_constants { typedef unsigned syntax_option_type; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { typedef int sig_atomic_t; }
namespace std { typedef unsigned long size_t; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { typedef long long streamoff; }
namespace std { typedef long streamsize; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short _Accum uint_uhk_t;
typedef unsigned short _Fract uint_uhr_t;
typedef unsigned _Accum uint_uk_t;
typedef unsigned long _Accum uint_ulk_t;
typedef unsigned long _Fract uint_ulr_t;
typedef unsigned _Fract uint_ur_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
cdecl> show int8_t
typedef signed char int8_t;
cdecl> show int8_t typedef
typedef signed char int8_t;
cdecl> show predefined
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *restrict, void *restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
cdecl> show predefined typedef
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic bool atomic_bool;
typedef _Atomic char atomic_char;
typedef _Atomic char16_t atomic_char16_t;
typedef _Atomic char32_t atomic_char32_t;
typedef _Atomic char8_t atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic int atomic_int;
typedef _Atomic int_fast16_t atomic_int_fast16_t;
typedef _Atomic int_fast32_t atomic_int_fast32_t;
typedef _Atomic int_fast64_t atomic_int_fast64_t;
typedef _Atomic int_fast8_t atomic_int_fast8_t;
typedef _Atomic int_least16_t atomic_int_least16_t;
typedef _Atomic int_least32_t atomic_int_least32_t;
typedef _Atomic int_least64_t atomic_int_least64_t;
typedef _Atomic int_least8_t atomic_int_least8_t;
typedef _Atomic intmax_t atomic_intmax_t;
typedef _Atomic intptr_t atomic_intptr_t;
typedef _Atomic long long atomic_llong;
typedef _Atomic long atomic_long;
typedef _Atomic ptrdiff_t atomic_ptrdiff_t;
typedef _Atomic signed char atomic_schar;
typedef _Atomic short atomic_short;
typedef _Atomic size_t atomic_size_t;
typedef _Atomic unsigned char atomic_uchar;
typedef _Atomic unsigned atomic_uint;
typedef _Atomic uint_fast16_t atomic_uint_fast16_t;
typedef _Atomic uint_fast32_t atomic_uint_fast32_t;
typedef _Atomic uint_fast64_t atomic_uint_fast64_t;
typedef _Atomic uint_fast8_t atomic_uint_fast8_t;
typedef _Atomic uint_least16_t atomic_uint_least16_t;
typedef _Atomic uint_least32_t atomic_uint_least32_t;
typedef _Atomic uint_least64_t atomic_uint_least64_t;
typedef _Atomic uint_least8_t atomic_uint_least8_t;
typedef _Atomic uintmax_t atomic_uintmax_t;
typedef _Atomic uintptr_t atomic_uintptr_t;
typedef _Atomic unsigned long long atomic_ullong;
typedef _Atomic unsigned long atomic_ulong;
typedef _Atomic unsigned short atomic_ushort;
typedef _Atomic wchar_t atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *restrict, void *restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
cdecl> show user
typedef int Int;
cdecl> show user typedef
typedef int Int;
cdecl> show FILE
typedef struct _iobuf FILE;
cdecl> 
cdecl> show __FILE__
#define __FILE__ "testing.c"
cdecl> show __LINE__
#define __LINE__ 42
cdecl> show __STDC__
#define __STDC__ 1
cdecl> 
cdecl> #define NAME2_HELPER(A,B)         A ## B
cdecl> #define NAME2(A,B)                NAME2_HELPER(A,B)
cdecl> show NAME2_HELPER
#define NAME2_HELPER(A, B) A ## B
cdecl> show macros
#define NAME2(A, B) NAME2_HELPER(A,B)
#define NAME2_HELPER(A, B) A ## B
cdecl> show user macros
#define NAME2(A, B) NAME2_HELPER(A,B)
#define NAME2_HELPER(A, B) A ## B
cdecl> show predefined macros
#define __DATE__ "Sep 09 1941"
#define __FILE__ "testing.c"
#define __LINE__ 42
#define __STDC_VERSION__ 202311L
#define __STDC__ 1
#define __TIME__ "12:34:56"
cdecl> 
cdecl> set c89
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 199409L
cdecl> set c95
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 199409L
cdecl> set c99
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 199901L
cdecl> set c11
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 201112L
cdecl> set c17
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 201710L
cdecl> set c23
cdecl> show __STDC_VERSION__
#define __STDC_VERSION__ 202311L
cdecl> 
cdecl> set c++
c++decl> show std::ios
namespace std { class ios; }
c++decl> show all predefined typedef
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic(bool) atomic_bool;
typedef _Atomic(char) atomic_char;
typedef _Atomic(char16_t) atomic_char16_t;
typedef _Atomic(char32_t) atomic_char32_t;
typedef _Atomic(char8_t) atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic(int) atomic_int;
typedef _Atomic(int_fast16_t) atomic_int_fast16_t;
typedef _Atomic(int_fast32_t) atomic_int_fast32_t;
typedef _Atomic(int_fast64_t) atomic_int_fast64_t;
typedef _Atomic(int_fast8_t) atomic_int_fast8_t;
typedef _Atomic(int_least16_t) atomic_int_least16_t;
typedef _Atomic(int_least32_t) atomic_int_least32_t;
typedef _Atomic(int_least64_t) atomic_int_least64_t;
typedef _Atomic(int_least8_t) atomic_int_least8_t;
typedef _Atomic(intmax_t) atomic_intmax_t;
typedef _Atomic(intptr_t) atomic_intptr_t;
typedef _Atomic(long long) atomic_llong;
typedef _Atomic(long) atomic_long;
typedef _Atomic(ptrdiff_t) atomic_ptrdiff_t;
typedef _Atomic(signed char) atomic_schar;
typedef _Atomic(short) atomic_short;
typedef _Atomic(size_t) atomic_size_t;
typedef _Atomic(unsigned char) atomic_uchar;
typedef _Atomic(unsigned) atomic_uint;
typedef _Atomic(uint_fast16_t) atomic_uint_fast16_t;
typedef _Atomic(uint_fast32_t) atomic_uint_fast32_t;
typedef _Atomic(uint_fast64_t) atomic_uint_fast64_t;
typedef _Atomic(uint_fast8_t) atomic_uint_fast8_t;
typedef _Atomic(uint_least16_t) atomic_uint_least16_t;
typedef _Atomic(uint_least32_t) atomic_uint_least32_t;
typedef _Atomic(uint_least64_t) atomic_uint_least64_t;
typedef _Atomic(uint_least8_t) atomic_uint_least8_t;
typedef _Atomic(uintmax_t) atomic_uintmax_t;
typedef _Atomic(uintptr_t) atomic_uintptr_t;
typedef _Atomic(unsigned long long) atomic_ullong;
typedef _Atomic(unsigned long) atomic_ulong;
typedef _Atomic(unsigned short) atomic_ushort;
typedef _Atomic(wchar_t) atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *__restrict, void *__restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short _Accum int_hk_t;
typedef short _Fract int_hr_t;
typedef _Accum int_k_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long _Accum int_lk_t;
typedef long _Fract int_lr_t;
typedef _Fract int_r_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { typedef float bfloat16_t; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { typedef unsigned mask; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { typedef double float128_t[2]; }
namespace std { typedef float float16_t; }
namespace std { typedef float float32_t; }
namespace std { typedef double float64_t; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { typedef void (*event_callback)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { typedef unsigned fmtflags; };
class std::ios_base { typedef unsigned iostate; };
class std::ios_base { typedef unsigned openmode; };
class std::ios_base { typedef int seekdir; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { typedef long double max_align_t; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { typedef void (*new_handler)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { typedef void *nullptr_t; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { typedef long ptrdiff_t; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { typedef unsigned error_type; }
namespace std::regex_constants { typedef unsigned match_flag_type; }
namespace std::regex_constants { typedef unsigned syntax_option_type; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { typedef int sig_atomic_t; }
namespace std { typedef unsigned long size_t; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { typedef long long streamoff; }
namespace std { typedef long streamsize; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short _Accum uint_uhk_t;
typedef unsigned short _Fract uint_uhr_t;
typedef unsigned _Accum uint_uk_t;
typedef unsigned long _Accum uint_ulk_t;
typedef unsigned long _Fract uint_ulr_t;
typedef unsigned _Fract uint_ur_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
c++decl> show all predefined *::atomic* as typedef
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
c++decl> show all predefined **::*clock as typedef
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct utc_clock; }
c++decl> show all predefined ** :: *clock as typedef
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct utc_clock; }
c++decl> show predefined
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic(bool) atomic_bool;
typedef _Atomic(char) atomic_char;
typedef _Atomic(char16_t) atomic_char16_t;
typedef _Atomic(char32_t) atomic_char32_t;
typedef _Atomic(char8_t) atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic(int) atomic_int;
typedef _Atomic(int_fast16_t) atomic_int_fast16_t;
typedef _Atomic(int_fast32_t) atomic_int_fast32_t;
typedef _Atomic(int_fast64_t) atomic_int_fast64_t;
typedef _Atomic(int_fast8_t) atomic_int_fast8_t;
typedef _Atomic(int_least16_t) atomic_int_least16_t;
typedef _Atomic(int_least32_t) atomic_int_least32_t;
typedef _Atomic(int_least64_t) atomic_int_least64_t;
typedef _Atomic(int_least8_t) atomic_int_least8_t;
typedef _Atomic(intmax_t) atomic_intmax_t;
typedef _Atomic(intptr_t) atomic_intptr_t;
typedef _Atomic(long long) atomic_llong;
typedef _Atomic(long) atomic_long;
typedef _Atomic(ptrdiff_t) atomic_ptrdiff_t;
typedef _Atomic(signed char) atomic_schar;
typedef _Atomic(short) atomic_short;
typedef _Atomic(size_t) atomic_size_t;
typedef _Atomic(unsigned char) atomic_uchar;
typedef _Atomic(unsigned) atomic_uint;
typedef _Atomic(uint_fast16_t) atomic_uint_fast16_t;
typedef _Atomic(uint_fast32_t) atomic_uint_fast32_t;
typedef _Atomic(uint_fast64_t) atomic_uint_fast64_t;
typedef _Atomic(uint_fast8_t) atomic_uint_fast8_t;
typedef _Atomic(uint_least16_t) atomic_uint_least16_t;
typedef _Atomic(uint_least32_t) atomic_uint_least32_t;
typedef _Atomic(uint_least64_t) atomic_uint_least64_t;
typedef _Atomic(uint_least8_t) atomic_uint_least8_t;
typedef _Atomic(uintmax_t) atomic_uintmax_t;
typedef _Atomic(uintptr_t) atomic_uintptr_t;
typedef _Atomic(unsigned long long) atomic_ullong;
typedef _Atomic(unsigned long) atomic_ulong;
typedef _Atomic(unsigned short) atomic_ushort;
typedef _Atomic(wchar_t) atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *__restrict, void *__restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { using bfloat16_t = float; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { using mask = unsigned; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { using float128_t = double[2]; }
namespace std { using float16_t = float; }
namespace std { using float32_t = float; }
namespace std { using float64_t = double; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { using event_callback = void(*)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { using fmtflags = unsigned; };
class std::ios_base { using iostate = unsigned; };
class std::ios_base { using openmode = unsigned; };
class std::ios_base { using seekdir = int; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { using max_align_t = long double; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { using new_handler = void(*)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { using nullptr_t = void*; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { using ptrdiff_t = long; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { using error_type = unsigned; }
namespace std::regex_constants { using match_flag_type = unsigned; }
namespace std::regex_constants { using syntax_option_type = unsigned; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { using sig_atomic_t = int; }
namespace std { using size_t = unsigned long; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { using streamoff = long long; }
namespace std { using streamsize = long; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
c++decl> show predefined typedef
typedef WORD ATOM;
typedef int BOOL;
typedef BYTE BOOLEAN;
typedef unsigned char BYTE;
typedef char CCHAR;
typedef char CHAR;
typedef DWORD COLORREF;
typedef struct _dirdesc DIR;
typedef unsigned long DWORD;
typedef unsigned DWORD32;
typedef unsigned long DWORD64;
typedef unsigned long DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef struct _iobuf FILE;
typedef float FLOAT;
typedef int HALF_PTR;
typedef PVOID HANDLE;
typedef HANDLE HBITMAP;
typedef HANDLE HBRUSH;
typedef HANDLE HCOLORSPACE;
typedef HANDLE HCONV;
typedef HANDLE HCONVLIST;
typedef HICON HCURSOR;
typedef HANDLE HDC;
typedef HANDLE HDDEDATA;
typedef HANDLE HDESK;
typedef HANDLE HDROP;
typedef HANDLE HDWP;
typedef HANDLE HENHMETAFILE;
typedef int HFILE;
typedef HANDLE HFONT;
typedef HANDLE HGDIOBJ;
typedef HANDLE HGLOBAL;
typedef HANDLE HHOOK;
typedef HANDLE HICON;
typedef HANDLE HINSTANCE;
typedef HANDLE HKEY;
typedef HANDLE HKL;
typedef HANDLE HLOCAL;
typedef HANDLE HMENU;
typedef HANDLE HMETAFILE;
typedef HINSTANCE HMODULE;
typedef HANDLE HMONITOR;
typedef HANDLE HPALETTE;
typedef HANDLE HPEN;
typedef long HRESULT;
typedef HANDLE HRGN;
typedef HANDLE HRSRC;
typedef HANDLE HSZ;
typedef HANDLE HWINSTA;
typedef HANDLE HWND;
typedef int INT;
typedef short INT16;
typedef int INT32;
typedef long INT64;
typedef signed char INT8;
typedef __int64 INT_PTR;
typedef WORD LANGID;
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef DWORD LCID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef long LONG;
typedef int LONG32;
typedef __int64 LONG64;
typedef long long LONGLONG;
typedef __int64 LONG_PTR;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef CHAR *LPCHAR;
typedef COLORREF *LPCOLORREF;
typedef const CHAR *LPCSTR;
typedef LPCWSTR LPCTSTR;
typedef const void *LPCVOID;
typedef const WCHAR *LPCWSTR;
typedef DWORD *LPDWORD;
typedef HANDLE *LPHANDLE;
typedef int *LPINT;
typedef long *LPLONG;
typedef CHAR *LPSTR;
typedef LPWSTR LPTSTR;
typedef void *LPVOID;
typedef WORD *LPWORD;
typedef WCHAR *LPWSTR;
typedef LONG_PTR LRESULT;
typedef BOOL *PBOOL;
typedef BOOLEAN *PBOOLEAN;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef LPCWSTR PCTSTR;
typedef const WCHAR *PCWSTR;
typedef DWORD *PDWORD;
typedef DWORD32 *PDWORD32;
typedef DWORD64 *PDWORD64;
typedef DWORDLONG *PDWORDLONG;
typedef DWORD_PTR *PDWORD_PTR;
typedef FLOAT *PFLOAT;
typedef HALF_PTR *PHALF_PTR;
typedef HANDLE *PHANDLE;
typedef HKEY *PHKEY;
typedef INT *PINT;
typedef INT16 *PINT16;
typedef INT32 *PINT32;
typedef INT64 *PINT64;
typedef INT8 *PINT8;
typedef INT_PTR *PINT_PTR;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LONG32 *PLONG32;
typedef LONG64 *PLONG64;
typedef LONGLONG *PLONGLONG;
typedef LONG_PTR *PLONG_PTR;
typedef SHORT *PSHORT;
typedef SIZE_T *PSIZE_T;
typedef SSIZE_T *PSSIZE_T;
typedef CHAR *PSTR;
typedef TBYTE *PTBYTE;
typedef TCHAR *PTCHAR;
typedef LPWSTR PTSTR;
typedef UCHAR *PUCHAR;
typedef UHALF_PTR *PUHALF_PTR;
typedef UINT *PUINT;
typedef UINT16 *PUINT16;
typedef UINT32 *PUINT32;
typedef UINT64 *PUINT64;
typedef UINT8 *PUINT8;
typedef UINT_PTR *PUINT_PTR;
typedef ULONG *PULONG;
typedef ULONG32 *PULONG32;
typedef ULONG64 *PULONG64;
typedef ULONGLONG *PULONGLONG;
typedef ULONG_PTR *PULONG_PTR;
typedef USHORT *PUSHORT;
typedef void *PVOID;
typedef WCHAR *PWCHAR;
typedef WORD *PWORD;
typedef WCHAR *PWSTR;
typedef unsigned long long QWORD;
typedef HANDLE SC_HANDLE;
typedef LPVOID SC_LOCK;
typedef HANDLE SERVICE_STATUS_HANDLE;
typedef short SHORT;
typedef ULONG_PTR SIZE_T;
typedef LONG_PTR SSIZE_T;
typedef WCHAR TBYTE;
typedef WCHAR TCHAR;
typedef unsigned char UCHAR;
typedef unsigned UHALF_PTR;
typedef unsigned UINT;
typedef unsigned short UINT16;
typedef unsigned UINT32;
typedef unsigned long UINT64;
typedef unsigned char UINT8;
typedef unsigned long UINT_PTR;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
typedef unsigned long ULONG;
typedef unsigned ULONG32;
typedef unsigned long ULONG64;
typedef unsigned long long ULONGLONG;
typedef unsigned long ULONG_PTR;
typedef struct UNICODE_STRING UNICODE_STRING;
typedef unsigned short USHORT;
typedef LONGLONG USN;
typedef wchar_t WCHAR;
typedef unsigned short WORD;
typedef UINT_PTR WPARAM;
typedef long double _Decimal128;
typedef _Decimal128 _Decimal128_t;
typedef _Decimal128 _Decimal128x;
typedef float _Decimal32;
typedef _Decimal32 _Decimal32_t;
typedef double _Decimal64;
typedef _Decimal64 _Decimal64_t;
typedef _Decimal64 _Decimal64x;
typedef long double _Float128;
typedef _Float128 _Float128_t;
typedef _Float128 _Float128x;
typedef float _Float16;
typedef _Float16 _Float16_t;
typedef float _Float32;
typedef _Float32 _Float32_t;
typedef _Float32 _Float32x;
typedef double _Float64;
typedef _Float64 _Float64_t;
typedef _Float64 _Float64x;
typedef _Float128 __float128;
typedef _Float64x __float80;
typedef _Float16 __fp16;
typedef long double __ibm128;
typedef long long __int128;
typedef short __int16;
typedef int __int32;
typedef long long __int64;
typedef signed char __int8;
typedef struct __m128 __m128;
typedef struct __m128d __m128d;
typedef struct __m128i __m128i;
typedef struct __m64 __m64;
typedef wchar_t __wchar_t;
typedef __int16 _int16;
typedef __int32 _int32;
typedef __int64 _int64;
typedef __int8 _int8;
typedef _Atomic(bool) atomic_bool;
typedef _Atomic(char) atomic_char;
typedef _Atomic(char16_t) atomic_char16_t;
typedef _Atomic(char32_t) atomic_char32_t;
typedef _Atomic(char8_t) atomic_char8_t;
typedef struct atomic_flag atomic_flag;
typedef _Atomic(int) atomic_int;
typedef _Atomic(int_fast16_t) atomic_int_fast16_t;
typedef _Atomic(int_fast32_t) atomic_int_fast32_t;
typedef _Atomic(int_fast64_t) atomic_int_fast64_t;
typedef _Atomic(int_fast8_t) atomic_int_fast8_t;
typedef _Atomic(int_least16_t) atomic_int_least16_t;
typedef _Atomic(int_least32_t) atomic_int_least32_t;
typedef _Atomic(int_least64_t) atomic_int_least64_t;
typedef _Atomic(int_least8_t) atomic_int_least8_t;
typedef _Atomic(intmax_t) atomic_intmax_t;
typedef _Atomic(intptr_t) atomic_intptr_t;
typedef _Atomic(long long) atomic_llong;
typedef _Atomic(long) atomic_long;
typedef _Atomic(ptrdiff_t) atomic_ptrdiff_t;
typedef _Atomic(signed char) atomic_schar;
typedef _Atomic(short) atomic_short;
typedef _Atomic(size_t) atomic_size_t;
typedef _Atomic(unsigned char) atomic_uchar;
typedef _Atomic(unsigned) atomic_uint;
typedef _Atomic(uint_fast16_t) atomic_uint_fast16_t;
typedef _Atomic(uint_fast32_t) atomic_uint_fast32_t;
typedef _Atomic(uint_fast64_t) atomic_uint_fast64_t;
typedef _Atomic(uint_fast8_t) atomic_uint_fast8_t;
typedef _Atomic(uint_least16_t) atomic_uint_least16_t;
typedef _Atomic(uint_least32_t) atomic_uint_least32_t;
typedef _Atomic(uint_least64_t) atomic_uint_least64_t;
typedef _Atomic(uint_least8_t) atomic_uint_least8_t;
typedef _Atomic(uintmax_t) atomic_uintmax_t;
typedef _Atomic(uintptr_t) atomic_uintptr_t;
typedef _Atomic(unsigned long long) atomic_ullong;
typedef _Atomic(unsigned long) atomic_ulong;
typedef _Atomic(unsigned short) atomic_ushort;
typedef _Atomic(wchar_t) atomic_wchar_t;
typedef int32_t blkcnt_t;
typedef int32_t blksize_t;
typedef char *caddr_t;
typedef unsigned cc_t;
typedef long clock_t;
typedef enum clockid_t clockid_t;
typedef pthread_cond_t cnd_t;
typedef void (*constraint_handler_t)(const char *__restrict, void *__restrict, errno_t);
typedef long daddr_t;
typedef int dev_t;
typedef struct div_t div_t;
typedef double double_t;
typedef int errno_t;
typedef struct fd_set fd_set;
typedef struct femode_t femode_t;
typedef struct fenv_t fenv_t;
typedef unsigned short fexcept_t;
typedef float float_t;
typedef struct fpos_t fpos_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;
typedef uint32_t gid_t;
typedef void *iconv_t;
typedef uint32_t id_t;
typedef struct imaxdiv_t imaxdiv_t;
typedef uint32_t in_addr_t;
typedef uint16_t in_port_t;
typedef unsigned ino_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef signed char int8_t;
typedef short int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef signed char int_fast8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef signed char int_least8_t;
typedef long intmax_t;
typedef long intptr_t;
typedef int jmp_buf[37];
typedef int32_t key_t;
typedef struct lconv lconv;
typedef struct ldiv_t ldiv_t;
typedef struct lldiv_t lldiv_t;
typedef struct locale_t locale_t;
typedef long double long_double_t;
typedef long double max_align_t;
typedef struct mbstate_t mbstate_t;
typedef enum memory_order memory_order;
typedef int32_t mode_t;
typedef pthread_mutex_t mtx_t;
typedef unsigned long nfds_t;
typedef uint32_t nlink_t;
typedef void *nullptr_t;
typedef long off_t;
typedef int once_flag;
typedef int32_t pid_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
typedef struct pthread_barrier_t pthread_barrier_t;
typedef struct pthread_barrierattr_t pthread_barrierattr_t;
typedef struct pthread_cond_t pthread_cond_t;
typedef struct pthread_condattr_t pthread_condattr_t;
typedef unsigned pthread_key_t;
typedef struct pthread_mutex_t pthread_mutex_t;
typedef struct pthread_mutexattr_t pthread_mutexattr_t;
typedef int pthread_once_t;
typedef struct pthread_rwlock_t pthread_rwlock_t;
typedef struct pthread_rwlockattr_t pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef unsigned long pthread_t;
typedef long ptrdiff_t;
typedef struct regex_t regex_t;
typedef struct regmatch_t regmatch_t;
typedef size_t regoff_t;
typedef uint32_t rlim_t;
typedef unsigned long rsize_t;
typedef uint32_t sa_family_t;
typedef int sig_atomic_t;
typedef void (*sig_t)(int);
typedef void (*sighandler_t)(int);
typedef struct siginfo_t siginfo_t;
typedef unsigned long sigset_t;
typedef unsigned long size_t;
typedef uint32_t socklen_t;
typedef long ssize_t;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { typedef float bfloat16_t; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { typedef unsigned mask; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { typedef double float128_t[2]; }
namespace std { typedef float float16_t; }
namespace std { typedef float float32_t; }
namespace std { typedef double float64_t; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { typedef void (*event_callback)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { typedef unsigned fmtflags; };
class std::ios_base { typedef unsigned iostate; };
class std::ios_base { typedef unsigned openmode; };
class std::ios_base { typedef int seekdir; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { typedef long double max_align_t; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { typedef void (*new_handler)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { typedef void *nullptr_t; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { typedef long ptrdiff_t; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { typedef unsigned error_type; }
namespace std::regex_constants { typedef unsigned match_flag_type; }
namespace std::regex_constants { typedef unsigned syntax_option_type; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { typedef int sig_atomic_t; }
namespace std { typedef unsigned long size_t; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { typedef long long streamoff; }
namespace std { typedef long streamsize; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
typedef int64_t suseconds_t;
typedef int (*thrd_start_t)(void*);
typedef pthread_t thrd_t;
typedef long time_t;
typedef void *timer_t;
typedef struct tm tm;
typedef void (*tss_dtor_t)(void*);
typedef void *tss_t;
typedef uint32_t uid_t;
typedef unsigned short uint16_t;
typedef unsigned uint32_t;
typedef unsigned long uint64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint_fast16_t;
typedef unsigned uint_fast32_t;
typedef unsigned long uint_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned short uint_least16_t;
typedef unsigned uint_least32_t;
typedef unsigned long uint_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned long uintmax_t;
typedef unsigned long uintptr_t;
typedef uint32_t useconds_t;
typedef void *va_list;
typedef int wctrans_t;
typedef unsigned long wctype_t;
typedef int wint_t;
c++decl> show predefined using
using ATOM = WORD;
using BOOL = int;
using BOOLEAN = BYTE;
using BYTE = unsigned char;
using CCHAR = char;
using CHAR = char;
using COLORREF = DWORD;
struct DIR;
using DWORD = unsigned long;
using DWORD32 = unsigned;
using DWORD64 = unsigned long;
using DWORDLONG = unsigned long;
using DWORD_PTR = ULONG_PTR;
struct FILE;
using FLOAT = float;
using HALF_PTR = int;
using HANDLE = PVOID;
using HBITMAP = HANDLE;
using HBRUSH = HANDLE;
using HCOLORSPACE = HANDLE;
using HCONV = HANDLE;
using HCONVLIST = HANDLE;
using HCURSOR = HICON;
using HDC = HANDLE;
using HDDEDATA = HANDLE;
using HDESK = HANDLE;
using HDROP = HANDLE;
using HDWP = HANDLE;
using HENHMETAFILE = HANDLE;
using HFILE = int;
using HFONT = HANDLE;
using HGDIOBJ = HANDLE;
using HGLOBAL = HANDLE;
using HHOOK = HANDLE;
using HICON = HANDLE;
using HINSTANCE = HANDLE;
using HKEY = HANDLE;
using HKL = HANDLE;
using HLOCAL = HANDLE;
using HMENU = HANDLE;
using HMETAFILE = HANDLE;
using HMODULE = HINSTANCE;
using HMONITOR = HANDLE;
using HPALETTE = HANDLE;
using HPEN = HANDLE;
using HRESULT = long;
using HRGN = HANDLE;
using HRSRC = HANDLE;
using HSZ = HANDLE;
using HWINSTA = HANDLE;
using HWND = HANDLE;
using INT = int;
using INT16 = short;
using INT32 = int;
using INT64 = long;
using INT8 = signed char;
using INT_PTR = __int64;
using LANGID = WORD;
union LARGE_INTEGER;
using LCID = DWORD;
using LCTYPE = DWORD;
using LGRPID = DWORD;
using LONG = long;
using LONG32 = int;
using LONG64 = __int64;
using LONGLONG = long long;
using LONG_PTR = __int64;
using LPBOOL = BOOL*;
using LPBYTE = BYTE*;
using LPCHAR = CHAR*;
using LPCOLORREF = COLORREF*;
using LPCSTR = const CHAR*;
using LPCTSTR = LPCWSTR;
using LPCVOID = const void*;
using LPCWSTR = const WCHAR*;
using LPDWORD = DWORD*;
using LPHANDLE = HANDLE*;
using LPINT = int*;
using LPLONG = long*;
using LPSTR = CHAR*;
using LPTSTR = LPWSTR;
using LPVOID = void*;
using LPWORD = WORD*;
using LPWSTR = WCHAR*;
using LRESULT = LONG_PTR;
using PBOOL = BOOL*;
using PBOOLEAN = BOOLEAN*;
using PBYTE = BYTE*;
using PCHAR = CHAR*;
using PCSTR = const CHAR*;
using PCTSTR = LPCWSTR;
using PCWSTR = const WCHAR*;
using PDWORD = DWORD*;
using PDWORD32 = DWORD32*;
using PDWORD64 = DWORD64*;
using PDWORDLONG = DWORDLONG*;
using PDWORD_PTR = DWORD_PTR*;
using PFLOAT = FLOAT*;
using PHALF_PTR = HALF_PTR*;
using PHANDLE = HANDLE*;
using PHKEY = HKEY*;
using PINT = INT*;
using PINT16 = INT16*;
using PINT32 = INT32*;
using PINT64 = INT64*;
using PINT8 = INT8*;
using PINT_PTR = INT_PTR*;
using PLCID = PDWORD;
using PLONG = LONG*;
using PLONG32 = LONG32*;
using PLONG64 = LONG64*;
using PLONGLONG = LONGLONG*;
using PLONG_PTR = LONG_PTR*;
using PSHORT = SHORT*;
using PSIZE_T = SIZE_T*;
using PSSIZE_T = SSIZE_T*;
using PSTR = CHAR*;
using PTBYTE = TBYTE*;
using PTCHAR = TCHAR*;
using PTSTR = LPWSTR;
using PUCHAR = UCHAR*;
using PUHALF_PTR = UHALF_PTR*;
using PUINT = UINT*;
using PUINT16 = UINT16*;
using PUINT32 = UINT32*;
using PUINT64 = UINT64*;
using PUINT8 = UINT8*;
using PUINT_PTR = UINT_PTR*;
using PULONG = ULONG*;
using PULONG32 = ULONG32*;
using PULONG64 = ULONG64*;
using PULONGLONG = ULONGLONG*;
using PULONG_PTR = ULONG_PTR*;
using PUSHORT = USHORT*;
using PVOID = void*;
using PWCHAR = WCHAR*;
using PWORD = WORD*;
using PWSTR = WCHAR*;
using QWORD = unsigned long long;
using SC_HANDLE = HANDLE;
using SC_LOCK = LPVOID;
using SERVICE_STATUS_HANDLE = HANDLE;
using SHORT = short;
using SIZE_T = ULONG_PTR;
using SSIZE_T = LONG_PTR;
using TBYTE = WCHAR;
using TCHAR = WCHAR;
using UCHAR = unsigned char;
using UHALF_PTR = unsigned;
using UINT = unsigned;
using UINT16 = unsigned short;
using UINT32 = unsigned;
using UINT64 = unsigned long;
using UINT8 = unsigned char;
using UINT_PTR = unsigned long;
union ULARGE_INTEGER;
using ULONG = unsigned long;
using ULONG32 = unsigned;
using ULONG64 = unsigned long;
using ULONGLONG = unsigned long long;
using ULONG_PTR = unsigned long;
struct UNICODE_STRING;
using USHORT = unsigned short;
using USN = LONGLONG;
using WCHAR = wchar_t;
using WORD = unsigned short;
using WPARAM = UINT_PTR;
using _Decimal128 = long double;
using _Decimal128_t = _Decimal128;
using _Decimal128x = _Decimal128;
using _Decimal32 = float;
using _Decimal32_t = _Decimal32;
using _Decimal64 = double;
using _Decimal64_t = _Decimal64;
using _Decimal64x = _Decimal64;
using _Float128 = long double;
using _Float128_t = _Float128;
using _Float128x = _Float128;
using _Float16 = float;
using _Float16_t = _Float16;
using _Float32 = float;
using _Float32_t = _Float32;
using _Float32x = _Float32;
using _Float64 = double;
using _Float64_t = _Float64;
using _Float64x = _Float64;
using __float128 = _Float128;
using __float80 = _Float64x;
using __fp16 = _Float16;
using __ibm128 = long double;
using __int128 = long long;
using __int16 = short;
using __int32 = int;
using __int64 = long long;
using __int8 = signed char;
struct __m128;
struct __m128d;
struct __m128i;
struct __m64;
using __wchar_t = wchar_t;
using _int16 = __int16;
using _int32 = __int32;
using _int64 = __int64;
using _int8 = __int8;
using atomic_bool = _Atomic(bool);
using atomic_char = _Atomic(char);
using atomic_char16_t = _Atomic(char16_t);
using atomic_char32_t = _Atomic(char32_t);
using atomic_char8_t = _Atomic(char8_t);
struct atomic_flag;
using atomic_int = _Atomic(int);
using atomic_int_fast16_t = _Atomic(int_fast16_t);
using atomic_int_fast32_t = _Atomic(int_fast32_t);
using atomic_int_fast64_t = _Atomic(int_fast64_t);
using atomic_int_fast8_t = _Atomic(int_fast8_t);
using atomic_int_least16_t = _Atomic(int_least16_t);
using atomic_int_least32_t = _Atomic(int_least32_t);
using atomic_int_least64_t = _Atomic(int_least64_t);
using atomic_int_least8_t = _Atomic(int_least8_t);
using atomic_intmax_t = _Atomic(intmax_t);
using atomic_intptr_t = _Atomic(intptr_t);
using atomic_llong = _Atomic(long long);
using atomic_long = _Atomic(long);
using atomic_ptrdiff_t = _Atomic(ptrdiff_t);
using atomic_schar = _Atomic(signed char);
using atomic_short = _Atomic(short);
using atomic_size_t = _Atomic(size_t);
using atomic_uchar = _Atomic(unsigned char);
using atomic_uint = _Atomic(unsigned);
using atomic_uint_fast16_t = _Atomic(uint_fast16_t);
using atomic_uint_fast32_t = _Atomic(uint_fast32_t);
using atomic_uint_fast64_t = _Atomic(uint_fast64_t);
using atomic_uint_fast8_t = _Atomic(uint_fast8_t);
using atomic_uint_least16_t = _Atomic(uint_least16_t);
using atomic_uint_least32_t = _Atomic(uint_least32_t);
using atomic_uint_least64_t = _Atomic(uint_least64_t);
using atomic_uint_least8_t = _Atomic(uint_least8_t);
using atomic_uintmax_t = _Atomic(uintmax_t);
using atomic_uintptr_t = _Atomic(uintptr_t);
using atomic_ullong = _Atomic(unsigned long long);
using atomic_ulong = _Atomic(unsigned long);
using atomic_ushort = _Atomic(unsigned short);
using atomic_wchar_t = _Atomic(wchar_t);
using blkcnt_t = int32_t;
using blksize_t = int32_t;
using caddr_t = char*;
using cc_t = unsigned;
using clock_t = long;
enum clockid_t;
using cnd_t = pthread_cond_t;
using constraint_handler_t = void(*)(const char *__restrict, void *__restrict, errno_t);
using daddr_t = long;
using dev_t = int;
struct div_t;
using double_t = double;
using errno_t = int;
struct fd_set;
struct femode_t;
struct fenv_t;
using fexcept_t = unsigned short;
using float_t = float;
struct fpos_t;
using fsblkcnt_t = unsigned long;
using fsfilcnt_t = unsigned long;
using gid_t = uint32_t;
using iconv_t = void*;
using id_t = uint32_t;
struct imaxdiv_t;
using in_addr_t = uint32_t;
using in_port_t = uint16_t;
using ino_t = unsigned;
using int16_t = short;
using int32_t = int;
using int64_t = long;
using int8_t = signed char;
using int_fast16_t = short;
using int_fast32_t = int;
using int_fast64_t = long;
using int_fast8_t = signed char;
using int_least16_t = short;
using int_least32_t = int;
using int_least64_t = long;
using int_least8_t = signed char;
using intmax_t = long;
using intptr_t = long;
using jmp_buf = int[37];
using key_t = int32_t;
struct lconv;
struct ldiv_t;
struct lldiv_t;
struct locale_t;
using long_double_t = long double;
using max_align_t = long double;
struct mbstate_t;
enum memory_order;
using mode_t = int32_t;
using mtx_t = pthread_mutex_t;
using nfds_t = unsigned long;
using nlink_t = uint32_t;
using nullptr_t = void*;
using off_t = long;
using once_flag = int;
using pid_t = int32_t;
using posix_spawn_file_actions_t = void*;
using posix_spawnattr_t = void*;
struct pthread_barrier_t;
struct pthread_barrierattr_t;
struct pthread_cond_t;
struct pthread_condattr_t;
using pthread_key_t = unsigned;
struct pthread_mutex_t;
struct pthread_mutexattr_t;
using pthread_once_t = int;
struct pthread_rwlock_t;
struct pthread_rwlockattr_t;
using pthread_spinlock_t = volatile int;
using pthread_t = unsigned long;
using ptrdiff_t = long;
struct regex_t;
struct regmatch_t;
using regoff_t = size_t;
using rlim_t = uint32_t;
using rsize_t = unsigned long;
using sa_family_t = uint32_t;
using sig_atomic_t = int;
using sig_t = void(*)(int);
using sighandler_t = void(*)(int);
struct siginfo_t;
using sigset_t = unsigned long;
using size_t = unsigned long;
using socklen_t = uint32_t;
using ssize_t = long;
namespace std { struct adopt_lock_t; }
namespace std { enum align_val_t; }
namespace std { struct allocator_arg_t; }
namespace std { class ambiguous_local_time; }
namespace std { struct any; }
namespace std { struct atomic_bool; }
namespace std { struct atomic_char; }
namespace std { struct atomic_char16_t; }
namespace std { struct atomic_char32_t; }
namespace std { struct atomic_char8_t; }
namespace std { struct atomic_flag; }
namespace std { struct atomic_int; }
namespace std { struct atomic_int16_t; }
namespace std { struct atomic_int32_t; }
namespace std { struct atomic_int64_t; }
namespace std { struct atomic_int8_t; }
namespace std { struct atomic_int_fast16_t; }
namespace std { struct atomic_int_fast32_t; }
namespace std { struct atomic_int_fast64_t; }
namespace std { struct atomic_int_fast8_t; }
namespace std { struct atomic_int_least16_t; }
namespace std { struct atomic_int_least32_t; }
namespace std { struct atomic_int_least64_t; }
namespace std { struct atomic_int_least8_t; }
namespace std { struct atomic_intmax_t; }
namespace std { struct atomic_intptr_t; }
namespace std { struct atomic_llong; }
namespace std { struct atomic_long; }
namespace std { struct atomic_ptrdiff_t; }
namespace std { struct atomic_schar; }
namespace std { struct atomic_short; }
namespace std { struct atomic_signed_lock_free; }
namespace std { struct atomic_size_t; }
namespace std { struct atomic_uchar; }
namespace std { struct atomic_uint; }
namespace std { struct atomic_uint16_t; }
namespace std { struct atomic_uint32_t; }
namespace std { struct atomic_uint64_t; }
namespace std { struct atomic_uint8_t; }
namespace std { struct atomic_uint_fast16_t; }
namespace std { struct atomic_uint_fast32_t; }
namespace std { struct atomic_uint_fast64_t; }
namespace std { struct atomic_uint_fast8_t; }
namespace std { struct atomic_uint_least16_t; }
namespace std { struct atomic_uint_least32_t; }
namespace std { struct atomic_uint_least64_t; }
namespace std { struct atomic_uint_least8_t; }
namespace std { struct atomic_uintmax_t; }
namespace std { struct atomic_uintptr_t; }
namespace std { struct atomic_ullong; }
namespace std { struct atomic_ulong; }
namespace std { struct atomic_unsigned_lock_free; }
namespace std { struct atomic_ushort; }
namespace std { struct atomic_wchar_t; }
namespace std { class bad_alloc; }
namespace std { class bad_any_cast; }
namespace std { class bad_array_new_length; }
namespace std { class bad_cast; }
namespace std { class bad_exception; }
namespace std { class bad_function_call; }
namespace std { class bad_optional_access; }
namespace std { class bad_typeid; }
namespace std { class bad_variant_access; }
namespace std { class bad_weak_ptr; }
namespace std { class bernoulli_distribution; }
namespace std { using bfloat16_t = float; }
namespace std { enum byte; }
namespace std { enum chars_format; }
namespace std::chrono { enum choose; }
namespace std::chrono { class day; }
namespace std::chrono { struct file_clock; }
namespace std::chrono { struct gps_clock; }
namespace std::chrono { class high_resolution_clock; }
namespace std::chrono { struct is_clock; }
namespace std::chrono { struct last_spec; }
namespace std::chrono { class leap_second; }
namespace std::chrono { struct local_info; }
namespace std::chrono { struct local_t; }
namespace std::chrono { class month; }
namespace std::chrono { class month_day; }
namespace std::chrono { class month_day_last; }
namespace std::chrono { class month_weekday; }
namespace std::chrono { class month_weekday_last; }
namespace std::chrono { class nonexistent_local_time; }
namespace std::chrono { class steady_clock; }
namespace std::chrono { struct sys_info; }
namespace std::chrono { class system_clock; }
namespace std::chrono { struct tai_clock; }
namespace std::chrono { struct time_zone; }
namespace std::chrono { class time_zone_link; }
namespace std::chrono { struct tzdb; }
namespace std::chrono { struct tzdb_list; }
namespace std::chrono { struct utc_clock; }
namespace std::chrono { class weekday; }
namespace std::chrono { class weekday_indexed; }
namespace std::chrono { class weekday_last; }
namespace std::chrono { class year; }
namespace std::chrono { class year_month; }
namespace std::chrono { class year_month_day; }
namespace std::chrono { class year_month_day_last; }
namespace std::chrono { class year_month_weekday; }
namespace std::chrono { class year_month_weekday_last; }
namespace std { class codecvt_base; }
namespace std { struct compare_three_way; }
namespace std { class condition_variable; }
namespace std { class condition_variable_any; }
namespace std { class ctype_base; }
class std::ctype_base { using mask = unsigned; };
namespace std { enum cv_status; }
namespace std { struct defer_lock_t; }
namespace std { struct destroying_delete_t; }
namespace std { struct div_t; }
namespace std { class domain_error; }
namespace std { enum endian; }
namespace std { class error_category; }
namespace std { class error_code; }
namespace std { class error_condition; }
namespace std { class exception; }
namespace std { class filebuf; }
namespace std::filesystem { enum copy_options; }
namespace std::filesystem { class directory_entry; }
namespace std::filesystem { class directory_iterator; }
namespace std::filesystem { enum directory_options; }
namespace std::filesystem { class file_status; }
namespace std::filesystem { enum file_type; }
namespace std::filesystem { class filesystem_error; }
namespace std::filesystem { class path; }
namespace std::filesystem { enum perm_options; }
namespace std::filesystem { enum perms; }
namespace std::filesystem { class recursive_directory_iterator; }
namespace std::filesystem { struct space_info; }
namespace std { using float128_t = double[2]; }
namespace std { using float16_t = float; }
namespace std { using float32_t = float; }
namespace std { using float64_t = double; }
namespace std { class format_error; }
namespace std { struct from_chars_result; }
namespace std { class fstream; }
namespace std { enum future_errc; }
namespace std { class future_error; }
namespace std { enum future_status; }
namespace std { class ifstream; }
namespace std { struct imaxdiv_t; }
namespace std { class invalid_argument; }
namespace std { class ios; }
namespace std { class ios_base; }
class std::ios_base { class Init; };
class std::ios_base { enum event; };
class std::ios_base { using event_callback = void(*)(event, ios_base&, int); };
class std::ios_base { class failure; };
class std::ios_base { using fmtflags = unsigned; };
class std::ios_base { using iostate = unsigned; };
class std::ios_base { using openmode = unsigned; };
class std::ios_base { using seekdir = int; };
namespace std { class iostream; }
namespace std { class ispanstream; }
namespace std { class istream; }
namespace std { class istringstream; }
namespace std { class jthread; }
namespace std { class latch; }
namespace std { enum launch; }
namespace std { struct ldiv_t; }
namespace std { class length_error; }
namespace std { struct lldiv_t; }
namespace std { class locale; }
namespace std { class logic_error; }
namespace std { using max_align_t = long double; }
namespace std { class messages_base; }
namespace std { class money_base; }
namespace std { struct mono_state; }
namespace std { class mutex; }
namespace std { using new_handler = void(*)(); }
namespace std { struct nonstopstate_t; }
namespace std { struct noop_coroutine_promise; }
namespace std { struct nothrow_t; }
namespace std { using nullptr_t = void*; }
namespace std { class ofstream; }
namespace std { class ospanstream; }
namespace std { class ostream; }
namespace std { class ostringstream; }
namespace std { class osyncstream; }
namespace std { class out_of_range; }
namespace std { class overflow_error; }
namespace std { struct partial_ordering; }
namespace std::pmr { class memory_resource; }
namespace std::pmr { class monotonic_buffer_resource; }
namespace std::pmr { struct pool_options; }
namespace std::pmr { class synchronized_pool_resource; }
namespace std::pmr { class unsynchronized_pool_resource; }
namespace std { using ptrdiff_t = long; }
namespace std { class random_device; }
namespace std { class range_error; }
namespace std { enum range_format; }
namespace std { class recursive_mutex; }
namespace std { class recursive_timed_mutex; }
namespace std { class regex; }
namespace std::regex_constants { using error_type = unsigned; }
namespace std::regex_constants { using match_flag_type = unsigned; }
namespace std::regex_constants { using syntax_option_type = unsigned; }
namespace std { struct regex_error; }
namespace std { class runtime_error; }
namespace std { class shared_mutex; }
namespace std { class shared_timed_mutex; }
namespace std { using sig_atomic_t = int; }
namespace std { using size_t = unsigned long; }
namespace std { struct source_location; }
namespace std { class spanbuf; }
namespace std { class spanstream; }
namespace std { class stacktrace; }
namespace std { class stacktrace_entry; }
namespace std { class stop_source; }
namespace std { class stop_token; }
namespace std { class streambuf; }
namespace std { using streamoff = long long; }
namespace std { using streamsize = long; }
namespace std { class string; }
namespace std { class string_view; }
namespace std { class stringbuf; }
namespace std { class stringstream; }
namespace std { struct strong_equality; }
namespace std { struct strong_ordering; }
namespace std { struct suspend_always; }
namespace std { struct suspend_never; }
namespace std { class syncbuf; }
namespace std { struct system_error; }
namespace std { class thread; }
namespace std { class time_base; }
namespace std { struct time_spec; }
namespace std { class timed_mutex; }
namespace std { struct tm; }
namespace std { struct to_chars_result; }
namespace std { struct try_to_lock_t; }
namespace std { class type_index; }
namespace std { class type_info; }
namespace std { class u16string; }
namespace std { class u16string_view; }
namespace std { class u32string; }
namespace std { class u32string_view; }
namespace std { class u8string_view; }
namespace std { class underflow_error; }
namespace std { struct unexpect_t; }
namespace std { struct weak_equality; }
namespace std { struct weak_ordering; }
namespace std { class wfilebuf; }
namespace std { class wfstream; }
namespace std { class wifstream; }
namespace std { class wios; }
namespace std { class wiostream; }
namespace std { class wispanstream; }
namespace std { class wistream; }
namespace std { class wistringstream; }
namespace std { class wofstream; }
namespace std { class wospanstream; }
namespace std { class wostream; }
namespace std { class wostringstream; }
namespace std { class wosyncstream; }
namespace std { class wregex; }
namespace std { class wspanbuf; }
namespace std { class wspanstream; }
namespace std { class wstreambuf; }
namespace std { class wstring; }
namespace std { class wstring_view; }
namespace std { class wstringbuf; }
namespace std { class wstringstream; }
namespace std { class wsyncbuf; }
using suseconds_t = int64_t;
using thrd_start_t = int(*)(void*);
using thrd_t = pthread_t;
using time_t = long;
using timer_t = void*;
struct tm;
using tss_dtor_t = void(*)(void*);
using tss_t = void*;
using uid_t = uint32_t;
using uint16_t = unsigned short;
using uint32_t = unsigned;
using uint64_t = unsigned long;
using uint8_t = unsigned char;
using uint_fast16_t = unsigned short;
using uint_fast32_t = unsigned;
using uint_fast64_t = unsigned long;
using uint_fast8_t = unsigned char;
using uint_least16_t = unsigned short;
using uint_least32_t = unsigned;
using uint_least64_t = unsigned long;
using uint_least8_t = unsigned char;
using uintmax_t = unsigned long;
using uintptr_t = unsigned long;
using useconds_t = uint32_t;
using va_list = void*;
using wctrans_t = int;
using wctype_t = unsigned long;
using wint_t = int;
c++decl> show predefined macros
#define __DATE__ "Sep 09 1941"
#define __FILE__ "testing.cpp"
#define __LINE__ 42
#define __TIME__ "12:34:56"
#define __cplusplus 202302L
c++decl> show ::FILE
typedef struct _iobuf FILE;
c++decl> 
c++decl> typedef int (*const CPF)(const char *const s)
c++decl> typedef int *const CPI
c++decl> typedef int S::*const CPMSI
c++decl> 
c++decl> show CPMSI
typedef int S::*const CPMSI;
c++decl> show CPMSI typedef
typedef int S::*const CPMSI;
c++decl> show CPMSI using
using CPMSI = int S::*const;
c++decl> show user
typedef int (*const CPF)(const char *const s);
typedef int *const CPI;
typedef int S::*const CPMSI;
typedef int Int;
c++decl> show user typedef
typedef int (*const CPF)(const char *const s);
typedef int *const CPI;
typedef int S::*const CPMSI;
typedef int Int;
c++decl> show user using
using CPF = int(*const)(const char *const);
using CPI = int *const;
using CPMSI = int S::*const;
using Int = int;
c++decl> show using
using CPF = int(*const)(const char *const);
using CPI = int *const;
using CPMSI = int S::*const;
using Int = int;
c++decl> 
c++decl> set c++98
c++decl> show __cplusplus
#define __cplusplus 199711L
c++decl> set c++03
c++decl> show __cplusplus
#define __cplusplus 199711L
c++decl> set c++11
c++decl> show __cplusplus
#define __cplusplus 201103L
c++decl> set c++14
c++decl> show __cplusplus
#define __cplusplus 201402L
c++decl> set c++17
c++decl> show __cplusplus
#define __cplusplus 201703L
c++decl> set c++20
c++decl> show __cplusplus
#define __cplusplus 202002L
c++decl> set c++23
c++decl> show __cplusplus
#define __cplusplus 202302L
