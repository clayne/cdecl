c++decl> 
c++decl> set west-decl=t
c++decl> set
  noalt-tokens
  nodebug
  noeast-const
    echo-commands
    english-types
    explicit-ecsu=su
  noexplicit-int
  nographs
  noinfer-command
    language=C++23
  nopermissive-types
    prompt
    semicolon
  notrailing-return
    using
    west-decl=t
c++decl> 
c++decl> declare p as pointer to int
int* p;
c++decl> declare p as pointer to pointer to int
int** p;
c++decl> 
c++decl> declare p as pointer to const pointer to int
int* const* p;
c++decl> declare p as const pointer to pointer to int
int** const p;
c++decl> declare p as const pointer to const pointer to int
int* const* const p;
c++decl> 
c++decl> declare p, q as pointer to int
int *p, *q;
c++decl> declare p, q as pointer to pointer to int
int **p, **q;
c++decl> 
c++decl> declare a as array of pointer to int
int* a[];
c++decl> declare a as array of pointer to pointer to int
int** a[];
c++decl> 
c++decl> declare a, b as array of pointer to int
int *a[], *b[];
c++decl> declare a, b as array of pointer to pointer to int
int **a[], **b[];
c++decl> 
c++decl> declare p as pointer to array of pointer to int
int* (*p)[];
c++decl> declare p as pointer to array of pointer to pointer to int
int** (*p)[];
c++decl> 
c++decl> declare p, q as pointer to array of pointer to int
int *(*p)[], *(*q)[];
c++decl> declare p, q as pointer to array of pointer to pointer to int
int **(*p)[], **(*q)[];
c++decl> 
c++decl> declare b as block returning pointer to int
int *(^b)();
c++decl> declare b as block returning pointer to pointer to int
int **(^b)();
c++decl> 
c++decl> declare b, c as block returning pointer to int
int *(^b)(), *(^c)();
c++decl> declare b, c as block returning pointer to pointer to int
int **(^b)(), **(^c)();
c++decl> 
c++decl> declare f as function returning pointer to int
int *f();
c++decl> declare f as function returning pointer to pointer to int
int **f();
c++decl> 
c++decl> declare f, g as function returning pointer to int
int *f(), *g();
c++decl> declare f, g as function returning pointer to pointer to int
int **f(), **g();
c++decl> 
c++decl> declare p as pointer to function returning int
int (*p)();
c++decl> declare p as pointer to function returning pointer to int
int *(*p)();
c++decl> declare p as pointer to function returning pointer to pointer to int
int **(*p)();
c++decl> 
c++decl> declare p as pointer to const pointer to function
void (*const* p)();
c++decl> declare p as pointer to const pointer to function returning pointer to int
int *(*const* p)();
c++decl> 
c++decl> declare p, q as pointer to function returning int
int (*p)(), (*q)();
c++decl> declare p, q as pointer to function returning pointer to int
int *(*p)(), *(*q)();
c++decl> declare p, q as pointer to function returning pointer to pointer to int
int **(*p)(), **(*q)();
c++decl> 
c++decl> declare p as pointer to member of class C int
int C::*p;
c++decl> declare p as pointer to member of class C pointer to int
int* C::*p;
c++decl> declare p as pointer to member of class C pointer to pointer to int
int** C::*p;
c++decl> 
c++decl> declare p, q as pointer to member of class C int
int C::*p, C::*q;
c++decl> declare p, q as pointer to member of class C pointer to int
int *C::*p, *C::*q;
c++decl> declare p, q as pointer to member of class C pointer to pointer to int
int **C::*p, **C::*q;
c++decl> 
c++decl> declare f as function returning pointer to member of class C int
int C::*f();
c++decl> declare f as function returning pointer to member of class C pointer to int
int *C::*f();
c++decl> declare f as function returning pointer to member of class C pointer to pointer to int
int **C::*f();
c++decl> 
c++decl> declare f, g as function returning pointer to member of class C int
int C::*f(), C::*g();
c++decl> declare f, g as function returning pointer to member of class C pointer to int
int *C::*f(), *C::*g();
c++decl> declare f, g as function returning pointer to member of class C pointer to pointer to int
int **C::*f(), **C::*g();
c++decl> 
c++decl> declare p as pointer to function returning pointer to member of class C int
int C::*(*p)();
c++decl> declare p as pointer to function returning pointer to member of class C pointer to int
int *C::*(*p)();
c++decl> declare p as pointer to function returning pointer to member of class C pointer to pointer to int
int **C::*(*p)();
c++decl> 
c++decl> declare p, q as pointer to function returning pointer to member of class C int
int C::*(*p)(), C::*(*q)();
c++decl> declare p, q as pointer to function returning pointer to member of class C pointer to int
int *C::*(*p)(), *C::*(*q)();
c++decl> declare p, q as pointer to function returning pointer to member of class C pointer to pointer to int
int **C::*(*p)(), **C::*(*q)();
c++decl> 
c++decl> declare ! as operator returning pointer to int
int *operator!();
c++decl> declare ! as operator returning pointer to pointer to int
int **operator!();
c++decl> 
c++decl> declare _x as user-defined literal( char ) returning pointer to int
int *operator"" _x(char);
c++decl> declare _x as user-defined literal( char ) returning pointer to pointer to int
int **operator"" _x(char);
c++decl> 
c++decl> set west-decl=s
c++decl> declare x, y as reference to structured binding
auto& [x, y];
c++decl> declare x, y as rvalue reference to structured binding
auto&& [x, y];
c++decl> declare x, y as reference to const structured binding
const auto& [x, y];
c++decl> declare x, y as reference to static structured binding
static auto& [x, y];
c++decl> declare x, y as reference to const static structured binding
static const auto& [x, y];
c++decl> declare x, y as reference to static const structured binding
static const auto& [x, y];
c++decl> declare x, y as const reference to structured binding
const auto& [x, y];
c++decl> declare x, y as const reference to static structured binding
static const auto& [x, y];
c++decl> declare x, y as static reference to structured binding
static auto& [x, y];
c++decl> declare x, y as static reference to const structured binding
static const auto& [x, y];
c++decl> declare x, y as const static reference to structured binding
static const auto& [x, y];
c++decl> declare x, y as static const reference to structured binding
static const auto& [x, y];
c++decl> 
c++decl> set nowest-decl
c++decl> set
  noalt-tokens
  nodebug
  noeast-const
    echo-commands
    english-types
    explicit-ecsu=su
  noexplicit-int
  nographs
  noinfer-command
    language=C++23
  nopermissive-types
    prompt
    semicolon
  notrailing-return
    using
  nowest-decl
c++decl> set west-decl=*
c++decl> set
  noalt-tokens
  nodebug
  noeast-const
    echo-commands
    english-types
    explicit-ecsu=su
  noexplicit-int
  nographs
  noinfer-command
    language=C++23
  nopermissive-types
    prompt
    semicolon
  notrailing-return
    using
    west-decl=bflost
c++decl> set west-decl=-
