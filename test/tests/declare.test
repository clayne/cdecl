EXPECTED_EXIT=0
cdecl -bEL$LINENO <<END
struct S

declare a as array 3 of array 5 of array 7 of int
declare a as array 3 of array 5 of int
declare a as array 3 of array 5 of pointer to function (void) returning int
declare a as array 3 of array 5 of pointer to function (void) returning pointer to int
declare a as array 3 of array 5 of pointer to function (void) returning pointer to pointer to array 7 of array 9 of int
declare a as array 3 of array 5 of pointer to function (void) returning pointer to pointer to array 7 of array 9 of pointer to char
declare a as array 3 of array 5 of pointer to function (void) returning pointer to pointer to array 7 of int
declare a as array 3 of array 5 of pointer to function (void) returning pointer to pointer to array 7 of pointer to int
declare a as array 3 of array 5 of pointer to function (void) returning pointer to pointer to int
declare a as array 3 of pointer to function (void) returning int
declare a as array 3 of pointer to pointer to function (void) returning int
declare a as array 9 of const pointer to int
declare a as array 9 of int
declare a as array 9 of pointer to int
declare a as array N of int
declare a as constant array N of integer
declare a as non-empty array N of integer
declare a as non-empty constant array N of integer
declare a as variable length array N of int
declare a as constant variable length array N of integer
declare a as non-empty variable length array N of integer
declare a as constant non-empty variable length array N of integer
declare f as function
declare f as function (fmt as pointer to const char, ...) returning void
declare f as function (fmt as pointer to const char, varargs) returning void
declare f as function (fmt as pointer to const char, variadic) returning void
declare f as function (g as function returning int) returning void
declare f as function (g as pointer to function (c as char) returning int) returning double
declare f as function (i as int, d as double) returning void
declare f as function (pointer to char) returning pointer to int
declare f as function (pointer to char, int) returning pointer to int
declare f as function (void) returning pointer to array 3 of array 5 of int
declare f as function (void) returning pointer to array 3 of array 5 of pointer to int
declare f as function (void) returning pointer to array 3 of int
declare f as function (void) returning pointer to array 3 of pointer to int
declare f as function (void) returning void
declare f as function (x as const array of int) returning void
declare f as function (x as non-empty array 3 of int) returning void
declare f as function (x as non-empty const array 3 of int) returning void
declare f as function (x as int, y as int) returning void
declare f as function (x as const variable length array of int) returning void
declare f as function (x as variable length array of int) returning void
declare f as function (x as y)
declare f as function returning pointer to int
declare f as inline function returning void
declare f as static function returning void
declare f as static inline function returning void
declare p as const pointer to array 3 of const pointer to array 5 of int
declare p as const pointer to array 3 of pointer to array 5 of int
declare p as const pointer to array 9 of const int
declare p as const pointer to array 9 of int
declare p as const pointer to block (void) returning pointer to int
declare p as const pointer to const pointer to int
declare p as const pointer to function (void) returning pointer to int
declare p as const pointer to int
declare p as const pointer to pointer to int
declare p as const volatile pointer to int
declare p as pointer to array 3 of const pointer to array 5 of int
declare p as pointer to array 3 of pointer to array 5 of int
declare p as pointer to array 9 of int
declare p as pointer to atomic int
declare p as pointer to block (void) returning pointer to int
declare p as pointer to function (void) returning pointer to int
declare p as pointer to int
declare p as pointer to X
declare p as pointer to pointer to int
declare p, q as pointer to function (int, double) returning pointer to char
declare p, q as pointer to function (int, double) returning pointer to const char
declare p, q as pointer to function (int, double) returning void
declare p, q as pointer to int
declare signal as func (sig as int, f as ptr to func (int) ret void) ret ptr to func (int) ret void
declare x as Boolean
declare x as _Atomic int
declare x as _BitInt 4
declare x as _BitInt 4 bits
declare x as _BitInt width 4
declare x as _BitInt width 4 bits
declare x as _BitInt(4)
declare x as atomic int
declare x as atomic pointer to int
declare x as bit precise integer 4
declare x, y as bit precise integer 4
declare x as bit-precise integer 4
declare x as block (x as int, y as int) returning double
declare x as bool
declare x as boolean
declare x as char aligned as 0 bytes
declare x as char aligned as 8 bytes
declare x as char aligned as N bytes
declare x as char aligned as pointer to void
declare x as complex double
declare x as complex float
declare x as const unsigned
declare x as const volatile pointer to int
declare x as constant int
declare x as enum E
declare x as enum E aligned 4
declare x as extern array 2 of int
declare x as imaginary double
declare x as imaginary float
declare x as long double
declare x as long long
declare x as signed char
declare x as signed int
declare x as signed long long
declare x as size_t
declare x as size_t width 3 bits
declare x as ssize_t
declare x as static array 2 of int
declare x as struct S
declare x as type int
declare x as type pointer to function (char) returning int
declare x as typedef int
declare x as union U
declare x as unsigned
declare x as unsigned char
declare x as unsigned int
declare x as unsigned long long
declare x as unsigned width 3 bits
declare x as volatile pointer to int
declare x as wchar_t
declare x as y
declare x, y as array 4 of int
declare x, y as int

declare x as register int
declare f as function (i as register int) returning void

declare f as cdecl function
declare p as pointer to cdecl function

declare x as const int
declare x as const S
declare x as const size_t
declare x as const struct S
declare p as pointer to const int
declare p as pointer to const pointer to int

declare _x as int
declare _X as int
declare __x as int
declare x__x as int

set knr
declare x as auto int
declare f as function (x) returning pointer to int
declare x as const int
declare x as long float
declare x as volatile int

set c89
declare f as function (i as register) returning void
declare p as pointer to function (x) returning int

set c17
declare f as function (x) returning pointer to int

declare f as _Noreturn function (int) returning void
declare f as non-returning function (int) returning void
declare f as noreturn function (int) returning void

declare x as __auto_type
declare x as bool
declare x as char aligned as 8 bytes

set c++
declare C as constructor
declare C as constructor (int)
declare C as destructor
declare C as explicit constructor (int)
declare C as virtual destructor
declare C of class C as destructor
declare S::T::f as function
declare S::f as function
declare c as char aligned as 0 bytes
declare c as char aligned as 8 bytes
declare x as char aligned as N of scope S bytes
declare delete as operator (p as pointer to void) returning void
declare delete[] as operator (p as pointer to void) returning void
declare f as carries-dependency function (x as carries-dependency int) returning int
declare f as carries-dependency function (x as int) returning int
declare f as consteval function returning int
declare f as exported function returning int
declare f as external "C" linkage function returning void
declare f as final function
declare f as friend function
declare f as function (r as rvalue reference to int) returning void
declare f as function (self as this reference to S) returning void
declare f as function (x as S::T)
declare f as function (x as carries-dependency int) returning int
declare f as function (x as deprecated int)
declare f as function (x as maybe-unused int)
declare f as function (x as maybe_unused int)
declare f as function returning auto
declare f as function returning pointer to member of class C int
declare f as function returning pointer to member of class C pointer to int

declare f as deprecated function returning void

declare x as parameter pack
declare x as reference to parameter pack
declare x as pointer to parameter pack
declare x as const parameter pack
declare x as reference to const parameter pack
declare x as pointer to const parameter pack
declare x as const pointer to parameter pack
declare x as reference to const parameter pack
declare x as pointer to const parameter pack

declare f as function (parameter pack) returning int
declare f as function (const parameter pack) returning int
declare f as function (reference to parameter pack) returning int
declare f as function (pointer to parameter pack) returning int
declare f as function (reference to const parameter pack) returning int
declare f as function (pointer to const parameter pack) returning int
declare f as function (const pointer to parameter pack) returning int
declare f as function (reference to const parameter pack) returning int
declare f as function (pointer to const parameter pack) returning int

declare f as maybe unused int
declare x as maybe-unused int
declare x as maybe_unused int
declare f as maybe unused function
declare f as maybe-unused function
declare f as maybe_unused function

declare f as nodiscard function returning int
declare f as no discard function returning int
declare f as non-discardable function returning int

declare f as noexcept function
declare f as no except function

declare f as non-throwing function returning void

declare f as noreturn function (int) returning void
declare f as no return function (int) returning void
declare f as non-returning function (int) returning void

declare f as override final function
declare f as overridden final function

declare f as pure virtual function returning void
declare f as restricted function

declare f as reference function returning void
declare f as rvalue reference function returning void
declare f as const reference function returning void
declare f as const rvalue reference function returning void

declare f as virtual function returning void
declare f as virtual override final function

declare final as int

declare T of namespace A of scope B as type int

declare x as constexpr int
declare x as const expression int
declare x as constant expression int

declare new as operator (n as std::size_t) returning pointer to void
declare new[] as operator (n as std::size_t) returning pointer to void
declare p as const pointer to member of class C int
declare p as const pointer to member of class C X
declare p as pointer to member of class C const int
declare p as pointer to member of class C function returning int
declare p as pointer to member of class C function returning pointer to class D
declare p as pointer to member of class C function returning pointer to int
declare p as pointer to member of class C function returning pointer to struct S
declare p as pointer to member of class C int
declare p as restricted pointer to int
declare r as reference to array 3 of int
declare x as array 4 of T of scope S
declare x as auto
declare x as bool
declare x as class C
declare x as constinit constant int
declare x as deprecated maybe-unused int
declare x as enum E
declare x as enum E of type int
declare x as enum class C
declare x as enum struct C
declare x as enumeration E width 3 bits
declare x as exported int
declare x as inline int
declare x as mutable int
declare x as pointer to function (void) returning reference to int
declare x as ref to int
declare x as reference to const int
declare x as reference to const pointer to int
declare x as reference to int
declare x as reference to pointer to int
declare x as reference to X
declare x as static constexpr int
declare x as type int
declare x of scope s as int
declare x of scope s of scope t::u as int
declare x of scope s::t as int
declare x, y as type int

declare x, y as structured binding
declare x, y as rvalue reference to structured binding
declare x, y as thread local structured binding

declare x, y as const structured binding
declare x, y as static structured binding
declare x, y as const static structured binding
declare x, y as static const structured binding

declare x, y as reference to structured binding
declare x, y as reference to const structured binding
declare x, y as reference to static structured binding
declare x, y as reference to const static structured binding
declare x, y as reference to static const structured binding
declare x, y as const reference to structured binding
declare x, y as const reference to static structured binding
declare x, y as static reference to structured binding
declare x, y as static reference to const structured binding
declare x, y as const static reference to structured binding
declare x, y as static const reference to structured binding

declare T as type deprecated int

declare lambda
declare lambda [i]
declare lambda [i] (x as int)
declare lambda capturing (i)
declare lambda capturing (i) (x as int)
declare lambda [copy]
declare lambda [copy default]
declare lambda [copy by default]
declare lambda [copy by default] (x as int)
declare lambda [copy by default, i, reference to j]
declare lambda [=]
declare lambda [reference]
declare lambda [reference default]
declare lambda [reference by default]
declare lambda [reference by default, i]
declare lambda [reference by default] (x as int)
declare lambda [this]
declare lambda [*this]
declare lambda [&]
declare noexcept lambda
declare noexcept lambda (x as int)
declare noexcept lambda (x as int) returning double

set c++03
declare C as non-throwing destructor

set c++14
declare f as throw function
END
